/**
 * This file handles stack switching for the C in-memory stack and for the
 * inaccessible wasm stack.
 */

/**
 * This file is processed with build_continuations.mjs and then #included into
 * continuations.c as the definition of continuations_init_js
 *
 * build_continuations resolves the wat imports by assembling wat and wraps it
 * in EM_JS.
 */

/**
 * For each continuation, we need to save and restore the Python wasm VM's
 * global state. There are three components to this:
 * 1. The Python threadState. This information includes the Python frame, the
 *    recursion_depth, etc. This is highly sensitive to the Python version. See
 *    threadstate.c.
 * 2. The "true wasm stack" / call stack state. This state we can't access and
 *    is magically handled by the JS VM if it supports JS Promise Integration
 *    and we ask nicely. This is contained in suspender.
 * 3. The "argument stack" / "addressable stack". This is a stack in linear
 *    memory. The compiler spills variables to this stack if someone takes a
 *    pointer to the variable because it is impossible to take a pointer to data
 *    on the true call stack.
 */

/**
 * Record the current Python thread state and the wasm call stack and argument
 * stack state. This is called by the hiwire_syncify wasm module just prior to
 * suspending the thread. `hiwire_syncify` uses `externref` for the return value
 * so we don't need to wrap this in a hiwire ID.
 */
function save_state() {
  const stackState = new StackState();
  return {
    threadState: Module._captureThreadState(),
    stackState,
    suspender: Module.suspenderGlobal.value,
  };
}

/**
 * Restore the Python thread state and the wasm argument stack state. This is
 * called by the hiwire_syncify wasm module upon resuming the thread. The
 * argument is the return value from save_state.
 */
function restore_state(state) {
  state.stackState.restore();
  Module._restoreThreadState(state.threadState);
  Module.suspenderGlobal.value = state.suspender;
  Module.validSuspender.value = true;
}

/*
 * Stack layout for a continuation (diagram stolen from greenlet).
 *
 *               |     ^^^       |
 *               |  older data   |
 *               |               |
 *  stack_stop . |_______________|
 *        .      |               |
 *        .      |     data      |
 *        .      |   in stack    |
 *        .    * |_______________| . .  _____________  stack_start + _copy.length
 *        .      |               |     |             |
 *        .      |     data      |     |  data saved |
 *        .      |   for next    |     |  in _copy   |
 *               | continuation  |     |             |
 * stack_start . |               | . . |_____________| stack_start
 *               |               |
 *               |  newer data   |
 *               |     vvv       |
 *
 * Each continuation has some part (possibly none) of its argument stack data
 * at the correct place on the actual stack and some part (possibly none) that
 * has been evicted to _copy by some other continuation that needed the space.
 */

/**
 * This is a list of continuations that have some of their state in the actual
 * argument stack. We need to keep track of them because restore() may need to
 * evict them from the stack in which case it will have to save their data.
 *
 * Invariants:
 * 1. This list contains a StackState for every continuation that at least
 *    partially on the argument stack except the currently executing one.
 *    (save_state will add the currently executing one to this list when it
 *    suspends.)
 * 2. The entries are sorted. Earlier entries occupy space further up on the
 *    stack, later entries occupy space lower down on the stack.
 * @private
 */
const stackStates = [];

/**
 * A class to help us keep track of the argument stack data for our individual
 * continuations. The suspender automatically and opaquely handles the call
 * stack for us, but the argument stack is an abstraction generated by the
 * compiler and we have to manage it ourselves.
 *
 * We only expose `restore` which ensures that the arg stack data is restored to
 * its proper location and the stack pointer and stackStop are in the correct
 * place. `restore` handles saving the data from other continuations that are
 * evicted.
 * @private
 */
class StackState {
  constructor() {
    /** current stack pointer */
    this.start = Module.___stack_pointer.value;
    /**
     * The value the stack pointer had when we entered Python. This is how far
     * up the stack the current continuation cares about. This was recorded just
     * before we entered Python in callPyObjectKwargsSuspending.
     */
    this.stop = Module.stackStop;
    /**
     * Where we store the data if it gets ejected from the actual argument
     * stack.
     */
    this._copy = new Uint8Array(0);
    if (this.start !== this.stop) {
      // Edge case that probably never happens: If start and stop are equal, the
      // current continuation occupies no arg stack space.
      stackStates.push(this);
    }
  }

  /**
   * Restore the argument stack in preparation to run the continuation.
   * @returns How much data we copied. (Only for debugging purposes.)
   */
  restore() {
    let total = 0;
    // Search up the stack for things that need to be ejected in their entirety
    // and save them
    while (
      stackStates.length > 0 &&
      stackStates[stackStates.length - 1].stop < this.stop
    ) {
      total += stackStates.pop()._save();
    }
    // Part of one more object may need to be ejected.
    const last = stackStates[stackStates.length - 1];
    if (last && last !== this) {
      total += last._save_up_to(this.stop);
    }
    // If we just saved all of the last stackState it needs to be removed.
    // Alternatively, the current StackState may be on the stackStates list.
    // Technically it would make sense to leave it there, but we will add it
    // back if we suspend again and if we exit normally it gets removed from the
    // stack.
    if (last && last.stop === this.stop) {
      stackStates.pop();
    }
    if (this._copy.length !== 0) {
      // Now that we've saved everything that might be in our way we can restore
      // the current stack data if need be.
      Module.HEAP8.set(this._copy, this.start);
      total += this._copy.length;
      this._copy = new Uint8Array(0);
    }
    // Restore stack pointers
    Module.stackStop = this.stop;
    Module.___stack_pointer.value = this.start;
    return total;
  }

  /**
   * Copy part of a stack frame into the _copy Uint8Array
   * @param {number} stop What part of the frame to copy
   * @returns How much data we copied (for debugging only)
   */
  _save_up_to(stop) {
    let sz1 = this._copy.length;
    let sz2 = stop - this.start;
    if (sz2 <= sz1) {
      return 0;
    }
    const new_segment = HEAP8.subarray(this.start + sz1, this.start + sz2);
    const c = new Uint8Array(sz2);
    c.set(this._copy);
    c.set(new_segment, sz1);
    this._copy = c;
    return sz2;
  }

  /**
   * Copy all of a stack frame into its _copy Uint8Array
   * @returns How much data we copied (for debugging only)
   */
  _save() {
    return this._save_up_to(this.stop);
  }
}

/**
 * Module.syncifyHandler does all of the work of hiwire_syncify (defined in
 * hiwire).
 */
function setSyncifyHandler() {
  const suspending_f = new WebAssembly.Function(
    { parameters: ["externref", "i32"], results: ["i32"] },
    async (x) => {
      try {
        return Hiwire.new_value(await Hiwire.get_value(x));
      } catch (e) {
        if (e && e.pyodide_fatal_error) {
          throw e;
        }
        // Error handling is tricky here. We want to set the error flag after
        // unswitching the stack. Just store the error for the moment.
        Module.syncify_error = e;
      }
    },
    { suspending: "first" },
  );
  Module.HEAP32[Module._syncifyHandler / 4] = Module.addFunction(
    provideSuspender(suspending_f),
  );
}

Module.suspendableApply = function (...args) {
  // validSuspender is a flag so that we can ask for permission before trying
  // to suspend. We can't ask for forgiveness because our normal technique for
  // this is to insert a JavaScript frame where we can catch the error
  // generated. We cannot suspend through JavaScript frames (this limitation
  // is part of the intentional design of Wasm Promise Integration).
  Module.validSuspender.value = true;
  Module.HEAP32[Module._has_suspender / 4] = 1;
  // Record the current stack position. See StackState in continuations.js
  Module.stackStop = Module.___stack_pointer.value;
  return Module.suspendableApplyHandler(...args);
};

/**
 * Create the suspendableApplyHandler.
 *
 * The "promising" option to WebAssembly.Function magically provides an extra
 * suspender argument to the function in front of the callee's arguments.
 *
 * wrap_apply.wat stores this argument into suspenderGlobal before making an
 * onward call to apply.
 */
Module.wrapApply = function (apply) {
  var module = new WebAssembly.Module(new Uint8Array(wrap_apply_wasm));
  var instance = new WebAssembly.Instance(module, {
    e: {
      s: Module.suspenderGlobal,
      i: apply,
    },
  });
  return new WebAssembly.Function(
    { parameters: ["i32", "i32", "i32", "i32", "i32"], results: ["externref"] },
    instance.exports.o,
    { promising: "first" },
  );
};

const trampolineMap = new Map();
Module.continuationsGetTrampoline = function (func) {
  const functype = WebAssembly.Function.type(wasmTableMirror[func]);
  const functypeStr = `parameters:${functype.parameters};result:${functype.result}`;
  const result = trampolineMap.get(functypeStr);
  if (result) {
    return result;
  }
  const expectedType = { parameters: Array(3).fill("i32"), results: ["i32"] };
  const trampoline = createTrampoline(expectedType, functype);
  const ptr = addFunction(trampoline);
  trampolineMap.set(functypeStr, ptr);
  return ptr;
};

const typeCodes = {
  i32: 0x7f,
  i64: 0x7e,
  f32: 0x7d,
  f64: 0x7c,
  externref: 0x6f,
};

function generateFuncType({ parameters, results }, target) {
  target.push(0x60 /* form: func */);
  uleb128Encode(parameters.length, target);
  for (let p of parameters) {
    target.push(typeCodes[p]);
  }
  uleb128Encode(results.length, target);
  for (let p of results) {
    target.push(typeCodes[p]);
  }
}

function insertSectionPrefix(sectionCode, sectionBody) {
  var section = [sectionCode];
  uleb128Encode(sectionBody.length, section); // length of section in bytes
  section.push(...sectionBody);
  return section;
}

// prettier-ignore
const WASM_PRELUDE = [
  0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
  0x01, 0x00, 0x00, 0x00, // version: 1
];

// prettier-ignore
function provideSuspender(wrapped_jsfunc) {
  const sections = [WASM_PRELUDE];
  const typeSection = [
    0x02, // number of types = 2
  ];
  const type = WebAssembly.Function.type(wrapped_jsfunc);
  generateFuncType(type, typeSection);
  type.parameters.shift();
  generateFuncType(type, typeSection);
  sections.push(insertSectionPrefix(0x01, typeSection));

  const importSection = [
    0x02, // number of imports
    // Import the wasmTable, which we will call "t"
    0x01, 0x65, // module "e"
    0x01, 0x73, // field "s"
    0x03, 0x6F, 0x01, // global externref mutable
    0x01, 0x65, // module "e"
    0x01, 0x69, // field "i"
    0x00, 0x00, // function of type "type"
  ];
  sections.push(insertSectionPrefix(0x02, importSection));
  const functionSection = [
    0x01, // number of functions = 1
    0x01, // type 1
  ];
  sections.push(insertSectionPrefix(0x03, functionSection));
  const exportSection = [
    0x01, // One export
    0x01, 0x6f, // name "o"
    0x00, // type: function
    0x01, // function index 1
  ];
  sections.push(insertSectionPrefix(0x07, exportSection));

  const code = [];
  code.push(
    0x01, // One run
    0x01, // of length 1
    0x6f, // of exterref
  );
  const suspenderLocal = type.parameters.length;
  code.push(0x23, 0); // global.get 0
  code.push(0x22, suspenderLocal); // local.tee suspender
  for (let i = 0; i < type.parameters.length; i++) {
    code.push(0x20, i); // local.get i
  }
  code.push(0x10, 0x00); // call "e.i"
  code.push(0x20, suspenderLocal); // local.get suspender
  code.push(0x24, 0); // global.set 0
  code.push(0x0b); // end
  const codeSection = insertSectionPrefix(0x01 /* number of codes */, code);
  sections.push(insertSectionPrefix(0x0a, codeSection));

  const bytes = new Uint8Array([].concat.apply([], sections));
  // We can compile this wasm module synchronously because it is small.
  const module = new WebAssembly.Module(bytes);
  const instance = new WebAssembly.Instance(module, {
    e: { i: wrapped_jsfunc, s: Module.suspenderGlobal },
  });
  const trampoline = instance.exports["o"];
  return trampoline;
}
Module.provideSuspender = provideSuspender;

const promisingModuleMap = new Map();
function typeToString(ty) {
  return `params:${ty.parameters};results:${ty.results}`;
}

// prettier-ignore
function getPromisingModule(orig_type) {
  const type_str = typeToString(orig_type);
  if (promisingModuleMap.has(type_str)) {
    return promisingModuleMap.get(type_str);
  }
  const sections = [WASM_PRELUDE];
  const typeSection = [
    0x02, // number of types = 2
  ];
  const wrapped_type = structuredClone(orig_type);
  wrapped_type.parameters.unshift("externref");
  generateFuncType(orig_type, typeSection);
  generateFuncType(wrapped_type, typeSection);
  sections.push(insertSectionPrefix(0x01, typeSection));

  const importSection = [
    0x02, // number of imports
    // Import the wasmTable, which we will call "t"
    0x01, 0x65, // module "e"
    0x01, 0x73, // field "s"
    0x03, 0x6F, 0x01, // global externref mutable
    0x01, 0x65, // module "e"
    0x01, 0x69, // field "i"
    0x00, 0x00, // function of type "type"
  ];
  sections.push(insertSectionPrefix(0x02, importSection));
  const functionSection = [
    0x01, // number of functions = 1
    0x01, // type 1
  ];
  sections.push(insertSectionPrefix(0x03, functionSection));
  const exportSection = [
    0x01, // One export
    0x01, 0x6f, // name "o"
    0x00, // type: function
    0x01, // the function we define
  ];
  sections.push(insertSectionPrefix(0x07, exportSection));

  const code = [];
  code.push(0); // no locals
  code.push(0x20, 0); // local.get 0
  code.push(0x24, 0); // global.set 0
  for (let i = 1; i < wrapped_type.parameters.length; i++) {
    code.push(0x20, i); // local.get i
  }
  code.push(0x10, 0x00); // call "e.i"
  code.push(0x0b); // end
  const codeSection = insertSectionPrefix(0x01 /* number of codes */, code);
  sections.push(insertSectionPrefix(0x0a, codeSection));

  const bytes = new Uint8Array([].concat.apply([], sections));
  // We can compile this wasm module synchronously because it is small.
  const module = new WebAssembly.Module(bytes);
  promisingModuleMap.set(type_str, module);
  return module;
}

const promisingFunctionMap = new WeakMap();
function createPromising(wasm_func) {
  if (promisingFunctionMap.has(wasm_func)) {
    return promisingFunctionMap.get(wasm_func);
  }
  const type = WebAssembly.Function.type(wasm_func);
  const module = getPromisingModule(type);
  const instance = new WebAssembly.Instance(module, {
    e: { i: wasm_func, s: Module.suspenderGlobal },
  });
  const result = new WebAssembly.Function(
    { parameters: type.parameters, results: ["externref"] },
    instance.exports.o,
    { promising: "first" },
  );
  promisingFunctionMap.set(wasm_func, result);
  return result;
}
Module.createPromising = createPromising;

async function async_trampoline_call(func, self, args, kw) {
  return await createPromising(getWasmTableEntry(func))(self, args, kw);
}

/**
 * This sets up syncify to work.
 *
 * We need to make:
 *
 * - suspenderGlobal where we store the suspender object
 *
 * - applyHandler which creates a suspender and stores it into suspenderGlobal
 *   then makes an onward call (used by callKwargsSyncifying)
 *
 * - the syncifyHandler which uses suspenderGlobal to suspend execution, then
 *   awaits a promise, then resumes execution and returns the promise result
 *   (used by hiwire_syncify)
 *
 * If the creation of these fails because JSPI is missing, then we set it up so
 * that callKwargsSyncifying and hiwire_syncify will always raise errors and
 * everything else can work as normal. In the short term, we'll almost always
 * end
 */
function initSuspenders() {
  try {
    Module.suspenderGlobal = new WebAssembly.Global(
      { value: "externref", mutable: true },
      null,
    );
    Module.suspendableApplyHandler = createPromising(Module.asm._pyproxy_apply);
    Module.validSuspender = new WebAssembly.Global(
      { value: "i32", mutable: true },
      0,
    );
    const trampoline_wrapper = new WebAssembly.Function(
      {
        parameters: ["externref", "i32", "i32", "i32", "i32"],
        results: ["i32"],
      },
      async_trampoline_call,
      { suspending: "first" },
    );
    const async_trampoline_ptr = addFunction(
      provideSuspender(trampoline_wrapper),
    );
    Module.HEAP32[Module._async_trampoline / 4] = async_trampoline_ptr;
    setSyncifyHandler();
    Module.suspendersAvailable = true;
  } catch (e) {
    // Browser doesn't support JSPI.
    Module.validSuspender = { value: 0 };
    Module.suspendersAvailable = false;
    Module.syncifyHandler = function () {
      Module.handle_js_error(Error("Syncify not supported"));
      return 0;
    };
    return;
  }
}
initSuspenders();
