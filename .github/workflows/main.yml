name: main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-core:
    runs-on: ubuntu-latest
    env:
      EMSDK_NUM_CORES: 3
      EMCC_CORES: 3
      PYODIDE_JOBS: 3
      CCACHE_DIR: /__w/ccache/

    steps:
      - uses: actions/checkout@v2

      - name: Cache ccache output
        uses: actions/cache@v2
        with:
          path: |
            /__w/ccache/
          key: ${{ hashFiles('Makefile.envs') }}-v20201205-

      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: pyodide-env
          python-version: 3.9.5
          channels: conda-forge

      - name: Install dependencies
        run: |
          sudo apt install -y build-essential git
          conda install -y nodejs ccache f2c pkg-config swig make patch pkg-config texinfo autoconf automake libtool
          # Fix permissions for the ccache folder
          sudo chmod -R a+r /__w/ccache/

      - name: Build emsdk
        run: |
          make -C emsdk

      - name: Build Cpython
        run: |
          # This is necessary to use the ccache from emsdk
          source pyodide_env.sh

          ccache -z
          make -C cpython
          ccache -s

      - name: build Pyodide core
        run: |
          # This is necessary to use the ccache from emsdk
          source pyodide_env.sh
          ccache -z
          # The following packages are currently used in the main pyodide test suite
          PYODIDE_PACKAGES="core,numpy" make
          ccache -s

      - name: check-size
        run: ls -lh build/

      - name: Store artifacts build
        uses: actions/upload-artifact@v2
        with:
          name: core-build
          path: ./build/
          retention-days: 10

      - name: Archive all build output
        run: |
          # We create an archive of all packages, as otherwise upload
          # is very slow
          rm -rf ./src/js/node_modules/
          tar czf /__w/build-core-all.tgz --exclude='*__pycache__*' .

      - name: Store artifacts all
        uses: actions/upload-artifact@v2
        with:
          name: core-build-all
          path: /__w/build-core-all.tgz
          retention-days: 5

  test-core:
    runs-on: ubuntu-latest
    env:
      DISPLAY: :99

    needs: build-core
    strategy:
      matrix:
        selenium_runner: [firefox]

    steps:
      - uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: core-build
          path: ./build/

      - name: run core tests
        env:
          SELENIUM_RUNNER: ${{ matrix.selenium_runner }}
        run: |
          ls -lh
          ls -lh build/
          tools/pytest_wrapper.py src packages/micropip/ -v -k "${SELENIUM_RUNNER}"

      - name: run package tests
        env:
          SELENIUM_RUNNER: ${{ matrix.selenium_runner }}
        run: |
          ls -lh
          ls -lh build/
          tools/pytest_wrapper.py packages/test* packages/*/test* -v -k "numpy and ${SELENIUM_RUNNER}"
