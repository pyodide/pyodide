name: main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-core:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001
    env:
      EMSDK_NUM_CORES: 3
      EMCC_CORES: 3
      PYODIDE_JOBS: 3
      CCACHE_DIR: /__w/ccache/


    steps:
      - uses: actions/checkout@v2

      - name: Cache ccache output
        uses: actions/cache@v2
        with:
          path: |
            /__w/ccache/
            /__w/pyodide/pyodide/emsdk/emsdk/upstream/emscripten/cache/
          key: ${{ hashFiles('Makefile.envs') }}-v20201205-

      - name: Build emsdk
        run: |
            # make sure the folder is writable
            touch /__w/test
            ccache -z
            make -C emsdk
            ccache -s

      - name: Build Cpython
        run: |
            ccache -z
            make -C cpython
            ccache -s

      - name: build Pyodide core
        run: |
            ccache -z
            # The following packages are currently used in the main pyodide test suite
            PYODIDE_PACKAGES="micropip,pyparsing,pytz,packaging,Jinja2" make
            ccache -s

      - name: check-size
        run: ls -lh build/

      - name: Store artifacts build
        uses: actions/upload-artifact@v2
        with:
          name: core-build
          path: ./build/
          retention-days: 10

      - name: Archive all build output
        run: |
          # We create an archive of all packages, as otherwise upload
          # is very slow
          rm -rf ./src/js/node_modules/
          tar czf /__w/build-core-all.tgz --exclude='*__pycache__*' .

      - name: Store artifacts all
        uses: actions/upload-artifact@v2
        with:
          name: core-build-all
          path: /__w/build-core-all.tgz
          retention-days: 5


  test-core:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001
    env:
      DISPLAY: :99

    needs: build-core
    strategy:
      matrix:
        selenium_runner: [firefox, chrome]

    steps:
      - uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: core-build

      - name: run tests
        env:
           SELENIUM_RUNNER: ${{ matrix.selenium_runner }}
        run: |
           tools/pytest_wrapper.py src packages/micropip/ -v -k "${SELENIUM_RUNNER}"

  test-js:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001

    needs: build-core

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: core-build-all

      - name: Unzip build artifacts
        run: |
          tar xzf build-core-all.tgz
          ls

      - name: test JS
        run: |
            cd src/js
            npm install
            npx tsd
            npm test

  benchmark:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001

    needs: build-core

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: core-build-all

      - name: Unzip build artifacts
        run: |
          tar xzf build-core-all.tgz
          ls

      - name: benchmark
        run: |
          python benchmark/benchmark.py /usr/local/bin/python3 build/benchmarks.json


  test-python:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001

    steps:
      - uses: actions/checkout@v2

      - name: test Python
        run: |
            mkdir test-results
            pip install ruamel.yaml
            pytest \
              --junitxml=test-results/junit.xml \
              --verbose \
              -k 'not (chrome or firefox)' \
              --cov=pyodide_build --cov=pyodide \
              src pyodide-build packages/micropip/

  lint:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001

    steps:
      - uses: actions/checkout@v2

      - name: lint
        run:  make lint


  test-docs:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001

    steps:
      - uses: actions/checkout@v2

      - name: install requirements
        run: |
          pip install -r docs/requirements-doc.txt

      - name: test docs
        run: |
          mkdir test-results
          pytest docs/sphinx_pyodide/tests --junitxml=test-results/junit.xml


  build-packages:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001
    env:
      EMSDK_NUM_CORES: 3
      EMCC_CORES: 3
      PYODIDE_JOBS: 3
      CCACHE_DIR: /__w/ccache/

    needs: build-core

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: core-build-all

      - name: Unzip build artifacts
        run: |
          tar xzf build-core-all.tgz
          ls

      - name: Build packages
        run: |
          ccache -z
          make -C packages
          ccache -s

      - name: Store artifacts build
        uses: actions/upload-artifact@v2
        with:
          name: build-packages
          path: ./build/
          retention-days: 10

  test-packages:
    runs-on: ubuntu-latest
    container:
      image: pyodide/pyodide-env:18
      options: --user 1001
    env:
      DISPLAY: :99

    needs: build-packages
    strategy:
      matrix:
        selenium_runner: [firefox, chrome]

    steps:
      - uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-packages

      - name: run tests
        env:
           SELENIUM_RUNNER: ${{ matrix.selenium_runner }}
        run: |
           tools/pytest_wrapper.py packages/test* packages/*/test* -v -k "${SELENIUM_RUNNER}"
