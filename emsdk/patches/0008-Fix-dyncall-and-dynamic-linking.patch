From 60d67d97804a83a16af556c1705c4e677240d7d5 Mon Sep 17 00:00:00 2001
From: Hood Chatham <roberthoodchatham@gmail.com>
Date: Fri, 8 Apr 2022 15:54:49 -0700
Subject: [PATCH 8/9] Fix dyncall and dynamic linking

We don't compile with WASM_BIGINT so if there is a 64 bit integer
in the dynamic call, Emscripten tries to call a legalizer wrapper.
These legalizer wrappers are only generated in the main module so
sometimes a side module tries to call a wrapper that doesn't exist.
This adds an extra handler in that case.
---
 src/library.js | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/src/library.js b/src/library.js
index ef8a618bb..cbc70bbe0 100644
--- a/src/library.js
+++ b/src/library.js
@@ -3516,7 +3516,29 @@ LibraryManager.library = {
     // part of thier signature, so we rely the dynCall functions generated by
     // wasm-emscripten-finalize
     if (sig.includes('j')) {
+#if MAIN_MODULE
+      if(Module["dynCall_" + sig]){
+        return dynCallLegacy(sig, ptr, args);
+      } else {
+        let new_args = [];
+        for(let i = 0; i < sig.length; i++){
+          if(sig[i + 1] === "j"){
+            new_args.push((BigInt(args[i] || 0) | (BigInt(args[i+1] || 0) << BigInt(32))));
+            i++;
+          } else {
+            new_args.push(args[i]);
+          }
+        }
+        let result = wasmTable.get(ptr).apply(null, new_args);
+        if(sig[0] !== "j"){
+          return result;
+        }
+        setTempRet0(Number((x) >> BigInt(32)));
+        return Number((x) & BigInt(0xffffffff));
+      }
+#else
       return dynCallLegacy(sig, ptr, args);
+#endif
     }
 #endif
 #if ASSERTIONS
-- 
2.25.1

