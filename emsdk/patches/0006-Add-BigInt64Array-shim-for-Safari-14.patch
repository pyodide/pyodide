From 4462c2871933db0adc4b46a24f77b942caff969c Mon Sep 17 00:00:00 2001
From: Hood Chatham <roberthoodchatham@gmail.com>
Date: Sun, 29 May 2022 18:17:29 -0700
Subject: [PATCH 6/8] Add BigInt64Array shim for Safari 14

---
 src/parseTools.js             |  2 +-
 src/polyfill/bigint64array.js | 87 +++++++++++++++++++++++++++++++++++
 src/preamble.js               |  5 +-
 3 files changed, 92 insertions(+), 2 deletions(-)
 create mode 100644 src/polyfill/bigint64array.js

diff --git a/src/parseTools.js b/src/parseTools.js
index 92490fe71..8a183c610 100644
--- a/src/parseTools.js
+++ b/src/parseTools.js
@@ -94,7 +94,7 @@ function preprocess(text, filenameHint) {
               showStack.push(truthy ? SHOW : IGNORE);
             } else if (first === '#include') {
               if (showCurrentLine()) {
-                let filename = line.substr(line.indexOf(' ') + 1);
+                let filename = trimmed.substr(trimmed.indexOf(' ') + 1);
                 if (filename.startsWith('"')) {
                   filename = filename.substr(1, filename.length - 2);
                 }
diff --git a/src/polyfill/bigint64array.js b/src/polyfill/bigint64array.js
new file mode 100644
index 000000000..126c2b51f
--- /dev/null
+++ b/src/polyfill/bigint64array.js
@@ -0,0 +1,87 @@
+if (typeof BigInt64Array === "undefined") {
+    // BigInt64Array polyfill for Safari versions between v14.0 and v15.0.
+    // All browsers other than Safari added BigInt and BigInt64Array at the same
+    // time, but Safari introduced BigInt in v14.0 and introduced BigInt64Array in
+    // v15.0
+
+    function partsToBigIntSigned(lower, upper) {
+        return BigInt(lower) | (BigInt(upper + 2 * (upper & 0x80000000)) << BigInt(32));
+    }
+
+    function partsToBigIntUnsigned(lower, upper) {
+        return BigInt(lower) | (BigInt(upper) << BigInt(32));
+    }
+
+    function bigIntToParts(value) {
+        var lower = Number(BigInt(value) & BigInt(0xffffffff)) | 0;
+        var upper = (Number(BigInt(value) >> BigInt(32)) | 0);
+        return [lower, upper];
+    }
+
+    function createBigIntArrayShim(partsToBigInt) {
+        function createBigInt64Array(array) {
+            if(!ArrayBuffer.isView(array)){
+                array = new Uint32Array(array);
+            }
+            let proxy = new Proxy({
+                slice: function(min, max) {
+                    var new_buf = array.slice(min * 2, max *2);
+                    return createBigInt64Array(new_buf);
+                },
+                subarray: function(min, max) {
+                    var new_buf = array.subarray(min * 2, max *2);
+                    return createBigInt64Array(new_buf);
+                },
+                [Symbol.iterator]: function*() {
+                    for (var i = 0; i < (array.length)/2; i++) {
+                        yield partsToBigInt(array[2*i], array[2*i+1]);
+                    }
+                },
+                buffer : array.buffer,
+                byteLength : array.byteLength,
+                offset : array.byteOffset / 2,
+                copyWithin: function(target, start, end) {
+                    array.copyWithin(target*2, start * 2, end*2);
+                    return proxy;
+                },
+                set: function(source, targetOffset) {
+                    if(2*(source.length + targetOffset) > array.length) {
+                        // This is the Chrome error message
+                        // Firefox: "invalid or out-of-range index"
+                        throw new RangeError("offset is out of bounds");
+                    }
+                    for (var i = 0; i < array.length; i++) {
+                        var value = source[i];
+                        var pair = bigIntToParts(BigInt(value));
+                        array.set(pair, 2*(targetOffset + i));
+                    }
+                }
+                }, {
+                get: function(target, idx, receiver) {
+                    if (typeof idx !== "string" || !/^\d+$/.test(idx)) {
+                        return Reflect.get(target, idx, receiver);
+                    }
+                    var lower = array[idx * 2];
+                    var upper = array[idx * 2 + 1];
+                    return partsToBigInt(lower, upper);
+                },
+                set: function(target, idx, value, receiver) {
+                    if (typeof idx !== "string" || !/^\d+$/.test(idx)) {
+                        return Reflect.set(target, idx, value, receiver);
+                    }
+                    if (typeof value !== "bigint") {
+                        // Chrome error message, Firefox has no "a" in front if "BigInt".
+                        throw new TypeError(`Cannot convert ${value} to a BigInt`);
+                    }
+                    var pair = bigIntToParts(value);
+                    array.set(pair, 2*idx);
+                }
+            });
+            return proxy;
+        }
+        return createBigInt64Array;
+    }
+
+    var BigUint64Array = createBigIntArrayShim(partsToBigIntUnsigned);
+    var BigInt64Array = createBigIntArrayShim(partsToBigIntSigned);
+}
diff --git a/src/preamble.js b/src/preamble.js
index 1094dd7dc..6afca739b 100644
--- a/src/preamble.js
+++ b/src/preamble.js
@@ -285,9 +285,12 @@ function updateGlobalBufferAndViews(buf) {
   Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
   Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
 #if WASM_BIGINT
+#if MIN_SAFARI_VERSION < 150000
+  #include "polyfill/bigint64array.js"
+#endif // MIN_SAFARI_VERSION < 15000
   Module['HEAP64'] = HEAP64 = new BigInt64Array(buf);
   Module['HEAPU64'] = HEAPU64 = new BigUint64Array(buf);
-#endif
+#endif // WASM_BIGINT
 }
 
 var TOTAL_STACK = {{{ TOTAL_STACK }}};
-- 
2.25.1

