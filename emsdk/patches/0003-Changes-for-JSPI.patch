From d03c660e0a5ca58581c173f877ef9264a568adb1 Mon Sep 17 00:00:00 2001
From: Hood Chatham <roberthoodchatham@gmail.com>
Date: Thu, 22 Jun 2023 18:53:22 -0700
Subject: [PATCH 3/5] Changes for JSPI

---
 src/library.js        | 2 +-
 src/library_dylink.js | 3 ++-
 src/parseTools.mjs    | 2 +-
 src/preamble.js       | 5 +++++
 4 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/library.js b/src/library.js
index 607e18e68..cfa2e49a1 100644
--- a/src/library.js
+++ b/src/library.js
@@ -492,7 +492,7 @@ addToLibrary({
 #if EXCEPTION_STACK_TRACES
     throw new EmscriptenSjLj;
 #else
-    throw Infinity;
+    throw Module.wrapException(Infinity);
 #endif
   },
 #elif !SUPPORT_LONGJMP
diff --git a/src/library_dylink.js b/src/library_dylink.js
index 31ae90318..f06f00904 100644
--- a/src/library_dylink.js
+++ b/src/library_dylink.js
@@ -73,6 +73,7 @@ var LibraryDylink = {
 #if !DISABLE_EXCEPTION_CATCHING || SUPPORT_LONGJMP == 'emscripten'
   $createInvokeFunction__internal: true,
   $createInvokeFunction__deps: ['$dynCall', 'setThrew', '$stackSave', '$stackRestore'],
+  $createInvokeFunction__postset: "if(!Module.createInvoke) { Module.createInvoke = Module.createInvokeFunction; }",
   $createInvokeFunction: (sig) => (ptr, ...args) => {
     var sp = stackSave();
     try {
@@ -129,7 +130,7 @@ var LibraryDylink = {
     // Asm.js-style exception handling: invoke wrapper generation
     else if (symName.startsWith('invoke_')) {
       // Create (and cache) new invoke_ functions on demand.
-      sym = wasmImports[symName] = createInvokeFunction(symName.split('_')[1]);
+      sym = wasmImports[symName] = Module.createInvoke(symName.split('_')[1]);
     }
 #endif
 #if !DISABLE_EXCEPTION_CATCHING
diff --git a/src/parseTools.mjs b/src/parseTools.mjs
index fa6da8556..5a0a48548 100644
--- a/src/parseTools.mjs
+++ b/src/parseTools.mjs
@@ -585,7 +585,7 @@ function makeThrow(excPtr) {
     }
     return `assert(false, '${assertInfo}');`;
   }
-  return `throw ${excPtr};`;
+  return `throw Module.wrapException(${excPtr});`;
 }
 
 function storeException(varName, excPtr) {
diff --git a/src/preamble.js b/src/preamble.js
index d097c857f..6a217e022 100644
--- a/src/preamble.js
+++ b/src/preamble.js
@@ -14,6 +14,10 @@
 // An online HTML version (which may be of a different version of Emscripten)
 //    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
 
+if(!Module.wrapException) {
+  Module.wrapException = (e) => e;
+}
+
 #if RELOCATABLE
 {{{ makeModuleReceiveWithVar('dynamicLibraries', undefined, '[]', true) }}}
 #endif
@@ -1038,6 +1042,7 @@ function getWasmImports() {
 #endif // WASM_ASYNC_COMPILATION
 
   var info = getWasmImports();
+  Module.adjustWasmImports?.(info);
 
 #if expectToReceiveOnModule('instantiateWasm')
   // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
-- 
2.34.1

