From d66f9aff14c6588af86c7a4b227d1eed4fb46db4 Mon Sep 17 00:00:00 2001
From: Hood Chatham <roberthoodchatham@gmail.com>
Date: Sun, 7 May 2023 12:58:34 -0700
Subject: [PATCH] Fix addFunction for js function when WebAssembly.Function is
 available

Backported from
https://github.com/emscripten-core/emscripten/pull/19306

---
 src/library_addfunction.js | 10 ----------
 test/test_other.py         | 41 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 41 insertions(+), 10 deletions(-)

diff --git a/src/library_addfunction.js b/src/library_addfunction.js
index 24ebe48af..90f8c0b23 100644
--- a/src/library_addfunction.js
+++ b/src/library_addfunction.js
@@ -23,12 +23,7 @@ mergeInto(LibraryManager.library, {
   $sigToWasmTypes: function(sig) {
     var typeNames = {
       'i': 'i32',
-#if MEMORY64
       'j': 'i64',
-#else
-      // i64 values will be split into two i32s.
-      'j': 'i32',
-#endif
       'f': 'f32',
       'd': 'f64',
 #if MEMORY64
@@ -46,11 +41,6 @@ mergeInto(LibraryManager.library, {
       assert(sig[i] in typeNames, 'invalid signature char: ' + sig[i]);
 #endif
       type.parameters.push(typeNames[sig[i]]);
-#if !MEMORY64
-      if (sig[i] === 'j') {
-        type.parameters.push('i32');
-      }
-#endif
     }
     return type;
   },
diff --git a/test/test_other.py b/test/test_other.py
index 90cf5f300..611a2504b 100644
--- a/test/test_other.py
+++ b/test/test_other.py
@@ -13389,3 +13389,44 @@ w:0,t:0x[0-9a-fA-F]+: formatted: 42
   def test_windows_batch_file_dp0_expansion_bug(self):
     create_file('build_with_quotes.bat',  f'@"emcc" {test_file("hello_world.c")}')
     self.run_process(['build_with_quotes.bat'])
+
+  @parameterized({
+    'memory64_bigint': (True, True),
+    'bigint': (False,True),
+    'memory64': (True,False),
+    '' : (False, False)
+  })
+  def test_add_js_function_64_bit(self, memory64, with_bigint):
+    if with_bigint:
+      self.set_setting('WASM_BIGINT')
+      self.node_args += shared.node_bigint_flags()
+
+    if memory64:
+      self.require_v8()
+      self.v8_args += ['--experimental-wasm-memory64']
+    else:
+      self.use_all_engines = True
+    self.set_setting('DEFAULT_LIBRARY_FUNCS_TO_INCLUDE', ['$addFunction'])
+    self.set_setting('RESERVED_FUNCTION_POINTERS')
+    self.set_setting('ENVIRONMENT', 'shell,node')
+    create_file('main.c', r'''
+      #include <emscripten.h>
+
+      typedef long long (functype)(long long);
+
+      int main() {
+        functype* f = (functype *)EM_ASM_INT({
+          return addFunction(function(num) {
+              out('Hello ' + num + ' from JS!');
+              return 5n;
+          }, 'jj');
+        });
+        if(f(26) == 5) {
+          return 0;
+        } else {
+          return 1;
+        }
+      }
+    ''')
+
+    self.do_runf('main.c', 'Hello 26 from JS!')
-- 
2.25.1

