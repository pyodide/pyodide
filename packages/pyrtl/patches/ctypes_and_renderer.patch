commit c5df13161c176b73c8071d1ae3bef51972ec0d97
Author: Michael Christensen <chmdko@gmail.com>
Date:   Sat Jun 5 00:25:52 2021 -0700

    Move ctype import for Pyodide

diff --git a/pyrtl/compilesim.py b/pyrtl/compilesim.py
index 4ce0d45..403efc2 100644
--- a/pyrtl/compilesim.py
+++ b/pyrtl/compilesim.py
@@ -1,6 +1,5 @@
 from __future__ import print_function, unicode_literals
 
-import ctypes
 import subprocess
 import tempfile
 import shutil
@@ -8,7 +7,6 @@ import collections
 from os import path
 import platform
 import sys
-import _ctypes
 
 from .core import working_block
 from .wire import Input, Output, Const, WireVector, Register
@@ -24,6 +22,11 @@ class DllMemInspector(collections.Mapping):
     """ Dictionary-like access to a hashmap in a CompiledSimulation. """
 
     def __init__(self, sim, mem):
+        try:
+            import ctypes
+        except ImportError:
+            raise PyrtlError('need ctypes installed')
+
         self._aw = mem.addrwidth
         self._limbs = sim._limbs(mem)
         self._vn = vn = sim.varname[mem]
@@ -239,6 +242,14 @@ class CompiledSimulation(object):
         :param inputs: A list of input mappings for each step;
             its length is the number of steps to be executed.
         """
+        try:
+            import ctypes
+        except ImportError:
+            raise PyrtlError(
+                'need ctypes installed '
+                '(try using normal Simulation or FastSimulation instead)'
+            )
+
         steps = len(inputs)
         # create i/o arrays of the appropriate length
         ibuf_type = ctypes.c_uint64 * (steps * self._ibufsz)
@@ -318,6 +329,14 @@ class CompiledSimulation(object):
 
     def _create_dll(self):
         """ Create a dynamically-linked library implementing the simulation logic. """
+        try:
+            import ctypes
+        except ImportError:
+            raise PyrtlError(
+                'need ctypes installed '
+                '(try using normal Simulation or FastSimulation instead)'
+            )
+
         self._dir = tempfile.mkdtemp()
         with open(path.join(self._dir, 'pyrtlsim.c'), 'w') as f:
             self._create_code(lambda s: f.write(s + '\n'))
@@ -809,6 +828,14 @@ class CompiledSimulation(object):
 
     def __del__(self):
         """Handle removal of the DLL when the simulator is deleted."""
+        try:
+            import _ctypes
+        except ImportError:
+            raise PyrtlError(
+                'need _ctypes installed '
+                '(try using normal Simulation or FastSimulation instead)'
+            )
+
         if self._dll is not None:
             handle = self._dll._handle
             if platform.system() == 'Windows':
diff --git a/pyrtl/simulation.py b/pyrtl/simulation.py
index 3fbf751..14aaef2 100644
--- a/pyrtl/simulation.py
+++ b/pyrtl/simulation.py
@@ -1127,7 +1127,7 @@ class SimulationTrace(object):
         file.flush()
 
     def render_trace(
-            self, trace_list=None, file=sys.stdout, render_cls=default_renderer(),
+            self, trace_list=None, file=sys.stdout, render_cls=AsciiWaveRenderer,
             symbol_len=5, segment_size=5, segment_delim=' ', extra_line=True):
 
         """ Render the trace to a file using unicode and ASCII escape sequences.
