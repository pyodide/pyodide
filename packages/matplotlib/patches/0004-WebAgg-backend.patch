From 5c8845d9e9e0b574f2c6f38cb6d5a4cc7a65039e Mon Sep 17 00:00:00 2001
From: Ian Thomas <ianthomas23@gmail.com>
Date: Fri, 31 Jan 2025 11:05:26 +0000
Subject: [PATCH] Patch WebAgg backend

---
 lib/matplotlib/backends/backend_webagg.py     | 285 +++---------------
 .../backends/backend_webagg_core.py           | 119 ++------
 lib/matplotlib/backends/web_backend/js/mpl.js |  76 +++--
 3 files changed, 131 insertions(+), 349 deletions(-)

diff --git a/lib/matplotlib/backends/backend_webagg.py b/lib/matplotlib/backends/backend_webagg.py
index 14c0b525fb..b8de4c1d18 100644
--- a/lib/matplotlib/backends/backend_webagg.py
+++ b/lib/matplotlib/backends/backend_webagg.py
@@ -20,31 +20,14 @@ import sys
 import signal
 import threading
 
-try:
-    import tornado
-except ImportError as err:
-    raise RuntimeError("The WebAgg backend requires Tornado.") from err
-
-import tornado.web
-import tornado.ioloop
-import tornado.websocket
+from js import document
+from pyodide.code import run_js
+from pyodide.ffi import create_proxy
 
 import matplotlib as mpl
 from matplotlib.backend_bases import _Backend
 from matplotlib._pylab_helpers import Gcf
 from . import backend_webagg_core as core
-from .backend_webagg_core import (  # noqa: F401 # pylint: disable=W0611
-    TimerAsyncio, TimerTornado)
-
-
-@mpl._api.deprecated("3.7")
-class ServerThread(threading.Thread):
-    def run(self):
-        tornado.ioloop.IOLoop.instance().start()
-
-
-webagg_server_thread = threading.Thread(
-    target=lambda: tornado.ioloop.IOLoop.instance().start())
 
 
 class FigureManagerWebAgg(core.FigureManagerWebAgg):
@@ -54,107 +37,58 @@ class FigureManagerWebAgg(core.FigureManagerWebAgg):
     def pyplot_show(cls, *, block=None):
         WebAggApplication.initialize()
 
-        url = "http://{address}:{port}{prefix}".format(
-            address=WebAggApplication.address,
-            port=WebAggApplication.port,
-            prefix=WebAggApplication.url_prefix)
+        managers = Gcf.get_all_fig_managers()
+        for manager in managers:
+            manager.show()
+
+    def show(self):
+        fignum = str(self.num)
 
-        if mpl.rcParams['webagg.open_in_browser']:
-            import webbrowser
-            if not webbrowser.open(url):
-                print(f"To view figure, visit {url}")
-        else:
-            print(f"To view figure, visit {url}")
+        js_code = \
+            """
+            var websocket_type = mpl.get_websocket_type();
+            var fig = new mpl.figure(fig_id, new websocket_type(fig_id), null, document.body);
+            fig;
+            """
+        js_code = f"var fig_id = '{fignum}';" + js_code
 
-        WebAggApplication.start()
+        js_fig = run_js(js_code)
+        web_socket = WebAggApplication.MockPythonWebSocket(self, js_fig.ws)
+        web_socket.open(fignum)
 
 
 class FigureCanvasWebAgg(core.FigureCanvasWebAggCore):
     manager_class = FigureManagerWebAgg
 
 
-class WebAggApplication(tornado.web.Application):
+class WebAggApplication():
     initialized = False
-    started = False
-
-    class FavIcon(tornado.web.RequestHandler):
-        def get(self):
-            self.set_header('Content-Type', 'image/png')
-            self.write(Path(mpl.get_data_path(),
-                            'images/matplotlib.png').read_bytes())
-
-    class SingleFigurePage(tornado.web.RequestHandler):
-        def __init__(self, application, request, *, url_prefix='', **kwargs):
-            self.url_prefix = url_prefix
-            super().__init__(application, request, **kwargs)
-
-        def get(self, fignum):
-            fignum = int(fignum)
-            manager = Gcf.get_fig_manager(fignum)
-
-            ws_uri = f'ws://{self.request.host}{self.url_prefix}/'
-            self.render(
-                "single_figure.html",
-                prefix=self.url_prefix,
-                ws_uri=ws_uri,
-                fig_id=fignum,
-                toolitems=core.NavigationToolbar2WebAgg.toolitems,
-                canvas=manager.canvas)
 
-    class AllFiguresPage(tornado.web.RequestHandler):
-        def __init__(self, application, request, *, url_prefix='', **kwargs):
-            self.url_prefix = url_prefix
-            super().__init__(application, request, **kwargs)
-
-        def get(self):
-            ws_uri = f'ws://{self.request.host}{self.url_prefix}/'
-            self.render(
-                "all_figures.html",
-                prefix=self.url_prefix,
-                ws_uri=ws_uri,
-                figures=sorted(Gcf.figs.items()),
-                toolitems=core.NavigationToolbar2WebAgg.toolitems)
-
-    class MplJs(tornado.web.RequestHandler):
-        def get(self):
-            self.set_header('Content-Type', 'application/javascript')
-
-            js_content = core.FigureManagerWebAgg.get_javascript()
-
-            self.write(js_content)
-
-    class Download(tornado.web.RequestHandler):
-        def get(self, fignum, fmt):
-            fignum = int(fignum)
-            manager = Gcf.get_fig_manager(fignum)
-            self.set_header(
-                'Content-Type', mimetypes.types_map.get(fmt, 'binary'))
-            buff = BytesIO()
-            manager.canvas.figure.savefig(buff, format=fmt)
-            self.write(buff.getvalue())
-
-    class WebSocket(tornado.websocket.WebSocketHandler):
+    class MockPythonWebSocket:
         supports_binary = True
 
+        def __init__(self, manager, js_web_socket):
+            self.manager = manager
+            self.js_web_socket = js_web_socket
+
         def open(self, fignum):
+            self.js_web_socket.open(create_proxy(self.on_message))   # should destroy proxy on close/exit?
             self.fignum = int(fignum)
-            self.manager = Gcf.get_fig_manager(self.fignum)
             self.manager.add_web_socket(self)
-            if hasattr(self, 'set_nodelay'):
-                self.set_nodelay(True)
 
         def on_close(self):
             self.manager.remove_web_socket(self)
 
         def on_message(self, message):
-            message = json.loads(message)
+            message = message.as_py_json()
+
             # The 'supports_binary' message is on a client-by-client
             # basis.  The others affect the (shared) canvas as a
             # whole.
             if message['type'] == 'supports_binary':
                 self.supports_binary = message['value']
             else:
-                manager = Gcf.get_fig_manager(self.fignum)
+                manager = self.manager
                 # It is possible for a figure to be closed,
                 # but a stale figure UI is still sending messages
                 # from the browser.
@@ -162,170 +96,37 @@ class WebAggApplication(tornado.web.Application):
                     manager.handle_json(message)
 
         def send_json(self, content):
-            self.write_message(json.dumps(content))
+            self.js_web_socket.receive_json(json.dumps(content))
 
         def send_binary(self, blob):
             if self.supports_binary:
-                self.write_message(blob, binary=True)
+                self.js_web_socket.receive_binary(blob, binary=True)
             else:
                 data_uri = "data:image/png;base64,{}".format(
                     blob.encode('base64').replace('\n', ''))
-                self.write_message(data_uri)
-
-    def __init__(self, url_prefix=''):
-        if url_prefix:
-            assert url_prefix[0] == '/' and url_prefix[-1] != '/', \
-                'url_prefix must start with a "/" and not end with one.'
-
-        super().__init__(
-            [
-                # Static files for the CSS and JS
-                (url_prefix + r'/_static/(.*)',
-                 tornado.web.StaticFileHandler,
-                 {'path': core.FigureManagerWebAgg.get_static_file_path()}),
-
-                # Static images for the toolbar
-                (url_prefix + r'/_images/(.*)',
-                 tornado.web.StaticFileHandler,
-                 {'path': Path(mpl.get_data_path(), 'images')}),
-
-                # A Matplotlib favicon
-                (url_prefix + r'/favicon.ico', self.FavIcon),
-
-                # The page that contains all of the pieces
-                (url_prefix + r'/([0-9]+)', self.SingleFigurePage,
-                 {'url_prefix': url_prefix}),
-
-                # The page that contains all of the figures
-                (url_prefix + r'/?', self.AllFiguresPage,
-                 {'url_prefix': url_prefix}),
-
-                (url_prefix + r'/js/mpl.js', self.MplJs),
-
-                # Sends images and events to the browser, and receives
-                # events from the browser
-                (url_prefix + r'/([0-9]+)/ws', self.WebSocket),
-
-                # Handles the downloading (i.e., saving) of static images
-                (url_prefix + r'/([0-9]+)/download.([a-z0-9.]+)',
-                 self.Download),
-            ],
-            template_path=core.FigureManagerWebAgg.get_static_file_path())
+                self.js_web_socket.receive_binary(data_uri)
 
     @classmethod
     def initialize(cls, url_prefix='', port=None, address=None):
         if cls.initialized:
             return
 
-        # Create the class instance
-        app = cls(url_prefix=url_prefix)
+        css = (Path(__file__).parent / "web_backend/css/mpl.css").read_text(encoding="utf-8")
+        style = document.createElement('style')
+        style.textContent = css
+        document.head.append(style)
 
-        cls.url_prefix = url_prefix
-
-        # This port selection algorithm is borrowed, more or less
-        # verbatim, from IPython.
-        def random_ports(port, n):
-            """
-            Generate a list of n random ports near the given port.
-
-            The first 5 ports will be sequential, and the remaining n-5 will be
-            randomly selected in the range [port-2*n, port+2*n].
-            """
-            for i in range(min(5, n)):
-                yield port + i
-            for i in range(n - 5):
-                yield port + random.randint(-2 * n, 2 * n)
-
-        if address is None:
-            cls.address = mpl.rcParams['webagg.address']
-        else:
-            cls.address = address
-        cls.port = mpl.rcParams['webagg.port']
-        for port in random_ports(cls.port,
-                                 mpl.rcParams['webagg.port_retries']):
-            try:
-                app.listen(port, cls.address)
-            except OSError as e:
-                if e.errno != errno.EADDRINUSE:
-                    raise
-            else:
-                cls.port = port
-                break
-        else:
-            raise SystemExit(
-                "The webagg server could not be started because an available "
-                "port could not be found")
+        js_content = core.FigureManagerWebAgg.get_javascript()
+        set_toolbar_image_callback = run_js(js_content)
+        set_toolbar_image_callback(create_proxy(WebAggApplication.get_toolbar_image))
 
         cls.initialized = True
 
     @classmethod
-    def start(cls):
-        import asyncio
-        try:
-            asyncio.get_running_loop()
-        except RuntimeError:
-            pass
-        else:
-            cls.started = True
-
-        if cls.started:
-            return
-
-        """
-        IOLoop.running() was removed as of Tornado 2.4; see for example
-        https://groups.google.com/forum/#!topic/python-tornado/QLMzkpQBGOY
-        Thus there is no correct way to check if the loop has already been
-        launched. We may end up with two concurrently running loops in that
-        unlucky case with all the expected consequences.
-        """
-        ioloop = tornado.ioloop.IOLoop.instance()
-
-        def shutdown():
-            ioloop.stop()
-            print("Server is stopped")
-            sys.stdout.flush()
-            cls.started = False
-
-        @contextmanager
-        def catch_sigint():
-            old_handler = signal.signal(
-                signal.SIGINT,
-                lambda sig, frame: ioloop.add_callback_from_signal(shutdown))
-            try:
-                yield
-            finally:
-                signal.signal(signal.SIGINT, old_handler)
-
-        # Set the flag to True *before* blocking on ioloop.start()
-        cls.started = True
-
-        print("Press Ctrl+C to stop WebAgg server")
-        sys.stdout.flush()
-        with catch_sigint():
-            ioloop.start()
-
-
-def ipython_inline_display(figure):
-    import tornado.template
-
-    WebAggApplication.initialize()
-    import asyncio
-    try:
-        asyncio.get_running_loop()
-    except RuntimeError:
-        if not webagg_server_thread.is_alive():
-            webagg_server_thread.start()
-
-    fignum = figure.number
-    tpl = Path(core.FigureManagerWebAgg.get_static_file_path(),
-               "ipython_inline_figure.html").read_text()
-    t = tornado.template.Template(tpl)
-    return t.generate(
-        prefix=WebAggApplication.url_prefix,
-        fig_id=fignum,
-        toolitems=core.NavigationToolbar2WebAgg.toolitems,
-        canvas=figure.canvas,
-        port=WebAggApplication.port).decode('utf-8')
+    def get_toolbar_image(cls, image):
+        filename = Path(__file__).parent.parent / f"mpl-data/images/{image}.png"
+        png_bytes = filename.read_bytes()
+        return png_bytes
 
 
 @_Backend.export
diff --git a/lib/matplotlib/backends/backend_webagg_core.py b/lib/matplotlib/backends/backend_webagg_core.py
index 4ceac16995..71903b2b92 100644
--- a/lib/matplotlib/backends/backend_webagg_core.py
+++ b/lib/matplotlib/backends/backend_webagg_core.py
@@ -8,14 +8,15 @@
 # - `backend_webagg.py` contains a concrete implementation of a basic
 #   application, implemented with asyncio.
 
-import asyncio
-import datetime
+import base64
 from io import BytesIO, StringIO
 import json
 import logging
+import mimetypes
 import os
 from pathlib import Path
 
+from js import document
 import numpy as np
 from PIL import Image
 
@@ -78,83 +79,9 @@ def _handle_key(key):
     return key
 
 
-class TimerTornado(backend_bases.TimerBase):
-    def __init__(self, *args, **kwargs):
-        self._timer = None
-        super().__init__(*args, **kwargs)
-
-    def _timer_start(self):
-        import tornado
-
-        self._timer_stop()
-        if self._single:
-            ioloop = tornado.ioloop.IOLoop.instance()
-            self._timer = ioloop.add_timeout(
-                datetime.timedelta(milliseconds=self.interval),
-                self._on_timer)
-        else:
-            self._timer = tornado.ioloop.PeriodicCallback(
-                self._on_timer,
-                max(self.interval, 1e-6))
-            self._timer.start()
-
-    def _timer_stop(self):
-        import tornado
-
-        if self._timer is None:
-            return
-        elif self._single:
-            ioloop = tornado.ioloop.IOLoop.instance()
-            ioloop.remove_timeout(self._timer)
-        else:
-            self._timer.stop()
-        self._timer = None
-
-    def _timer_set_interval(self):
-        # Only stop and restart it if the timer has already been started
-        if self._timer is not None:
-            self._timer_stop()
-            self._timer_start()
-
-
-class TimerAsyncio(backend_bases.TimerBase):
-    def __init__(self, *args, **kwargs):
-        self._task = None
-        super().__init__(*args, **kwargs)
-
-    async def _timer_task(self, interval):
-        while True:
-            try:
-                await asyncio.sleep(interval)
-                self._on_timer()
-
-                if self._single:
-                    break
-            except asyncio.CancelledError:
-                break
-
-    def _timer_start(self):
-        self._timer_stop()
-
-        self._task = asyncio.ensure_future(
-            self._timer_task(max(self.interval / 1_000., 1e-6))
-        )
-
-    def _timer_stop(self):
-        if self._task is not None:
-            self._task.cancel()
-        self._task = None
-
-    def _timer_set_interval(self):
-        # Only stop and restart it if the timer has already been started
-        if self._task is not None:
-            self._timer_stop()
-            self._timer_start()
-
 
 class FigureCanvasWebAggCore(backend_agg.FigureCanvasAgg):
     manager_class = _api.classproperty(lambda cls: FigureManagerWebAgg)
-    _timer_cls = TimerAsyncio
     # Webagg and friends having the right methods, but still
     # having bugs in practice.  Do not advertise that it works until
     # we can debug this.
@@ -249,7 +176,7 @@ class FigureCanvasWebAggCore(backend_agg.FigureCanvasAgg):
 
             # Store the current buffer so we can compute the next diff.
             self._last_buff = buff.copy()
-            self._force_full = False
+            #self._force_full = False
             self._png_is_old = False
 
             data = output.view(dtype=np.uint8).reshape((*output.shape, 4))
@@ -266,15 +193,6 @@ class FigureCanvasWebAggCore(backend_agg.FigureCanvasAgg):
     def handle_unknown_event(self, event):
         _log.warning('Unhandled message type %s. %s', event["type"], event)
 
-    def handle_ack(self, event):
-        # Network latency tends to decrease if traffic is flowing
-        # in both directions.  Therefore, the browser sends back
-        # an "ack" message after each image frame is received.
-        # This could also be used as a simple sanity check in the
-        # future, but for now the performance increase is enough
-        # to justify it, even if the server does nothing with it.
-        pass
-
     def handle_draw(self, event):
         self.draw()
 
@@ -360,6 +278,31 @@ class FigureCanvasWebAggCore(backend_agg.FigureCanvasAgg):
             self._force_full = True
             self.draw_idle()
 
+    def handle_save(self, event):
+        figure_id = event['figure_id']
+        format = event['format']
+
+        mimetype = mimetypes.types_map.get(f".{format}")
+        if mimetype is None:
+            window.alert(f"Cannot download plot, unable to determine mimetype for '{format}'")
+            return
+
+        element = document.createElement('a')
+        data = BytesIO()
+        self.figure.savefig(data, format=format)
+
+        element.setAttribute(
+            "href",
+            "data:{};base64,{}".format(
+                mimetype, base64.b64encode(data.getvalue()).decode("ascii")
+            ),
+        )
+        element.setAttribute("download", f"plot{figure_id}.{format}")
+        element.style.display = "none"
+        document.body.appendChild(element)
+        element.click()
+        document.body.removeChild(element)
+
     def send_event(self, event_type, **kwargs):
         if self.manager:
             self.manager._send_event(event_type, **kwargs)
@@ -498,6 +441,10 @@ class FigureManagerWebAgg(backend_bases.FigureManagerBase):
         output.write("mpl.default_extension = {};".format(
             json.dumps(FigureCanvasWebAggCore.get_default_filetype())))
 
+        output.write("mpl.toolbar_image_callback = null;\n")
+        output.write("mpl.set_toolbar_image_callback = function(c) {mpl.toolbar_image_callback=c;}\n")
+        output.write("mpl.set_toolbar_image_callback;\n")
+
         if stream is None:
             return output.getvalue()
 
diff --git a/lib/matplotlib/backends/web_backend/js/mpl.js b/lib/matplotlib/backends/web_backend/js/mpl.js
index 140f590385..c85a43e9dc 100644
--- a/lib/matplotlib/backends/web_backend/js/mpl.js
+++ b/lib/matplotlib/backends/web_backend/js/mpl.js
@@ -2,19 +2,53 @@
 /* global mpl */
 window.mpl = {};
 
-mpl.get_websocket_type = function () {
-    if (typeof WebSocket !== 'undefined') {
-        return WebSocket;
-    } else if (typeof MozWebSocket !== 'undefined') {
-        return MozWebSocket;
-    } else {
-        alert(
-            'Your browser does not have WebSocket support. ' +
-                'Please try Chrome, Safari or Firefox ≥ 6. ' +
-                'Firefox 4 and 5 are also supported but you ' +
-                'have to enable WebSockets in about:config.'
-        );
+class MockJsWebSocket {
+    binaryType = "blob";
+
+    constructor(fig_id) {
+        this.fig_id = fig_id;
+        this.readyState = 0;
+        this.python_web_socket = null;
+        this.python_onmessage_callback = null;
+    }
+
+    get onopen() {
+        return this._onopen;
+    }
+
+    set onopen(listener) {
+        this._onopen = listener;
+        this.readyState = 1;
+    }
+
+    open(python_onmessage_callback) {
+        this.python_onmessage_callback = python_onmessage_callback;
+        if (this.onopen != null) {
+            this.onopen();
+        }
+    }
+
+    receive_binary(content, binary=true) {
+        content = content.toJs();
+        blob = new Blob([content]);
+        this.onmessage({ data: blob });
     }
+
+    receive_json(content) {
+        this.onmessage({ data: content });
+    }
+
+    send(content) {
+        if (this.python_onmessage_callback != null) {
+            this.python_onmessage_callback(content);
+        }
+    }
+
+    _onopen = null;
+}
+
+mpl.get_websocket_type = function () {
+    return MockJsWebSocket;
 };
 
 mpl.figure = function (figure_id, websocket, ondownload, parent_element) {
@@ -51,6 +85,7 @@ mpl.figure = function (figure_id, websocket, ondownload, parent_element) {
 
     parent_element.appendChild(this.root);
 
+    this._toolbar_images = [];
     this._init_header(this);
     this._init_canvas(this);
     this._init_toolbar(this);
@@ -85,8 +120,6 @@ mpl.figure = function (figure_id, websocket, ondownload, parent_element) {
     };
 
     this.ws.onmessage = this._make_on_message_function(this);
-
-    this.ondownload = ondownload;
 };
 
 mpl.figure.prototype._init_header = function () {
@@ -381,9 +414,11 @@ mpl.figure.prototype._init_toolbar = function () {
         button.addEventListener('click', on_click_closure(method_name));
         button.addEventListener('mouseover', on_mouseover_closure(tooltip));
 
-        var icon_img = document.createElement('img');
-        icon_img.src = '_images/' + image + '.png';
-        icon_img.srcset = '_images/' + image + '_large.png 2x';
+        var icon_img = new Image();
+        this._toolbar_images.push(icon_img);
+        image_bytes = mpl.toolbar_image_callback(image).toJs();
+        blob = new Blob([image_bytes], { type: 'image/png' });
+        icon_img.src = (window.URL || window.webkitURL).createObjectURL(blob);
         icon_img.alt = tooltip;
         button.appendChild(icon_img);
 
@@ -422,20 +457,20 @@ mpl.figure.prototype.request_resize = function (x_pixels, y_pixels) {
 mpl.figure.prototype.send_message = function (type, properties) {
     properties['type'] = type;
     properties['figure_id'] = this.id;
-    this.ws.send(JSON.stringify(properties));
+    this.ws.send(properties);
 };
 
 mpl.figure.prototype.send_draw_message = function () {
     if (!this.waiting) {
         this.waiting = true;
-        this.ws.send(JSON.stringify({ type: 'draw', figure_id: this.id }));
+        this.ws.send({ type: 'draw', figure_id: this.id });
     }
 };
 
 mpl.figure.prototype.handle_save = function (fig, _msg) {
     var format_dropdown = fig.format_dropdown;
     var format = format_dropdown.options[format_dropdown.selectedIndex].value;
-    fig.ondownload(fig, format);
+    this.ws.send({ type: 'save', figure_id: this.id, format: format });
 };
 
 mpl.figure.prototype.handle_resize = function (fig, msg) {
@@ -517,7 +552,6 @@ mpl.figure.prototype.handle_navigate_mode = function (fig, msg) {
 
 mpl.figure.prototype.updated_canvas_event = function () {
     // Called whenever the canvas gets updated.
-    this.send_message('ack', {});
 };
 
 // A function to construct a web socket function for onmessage handling.
-- 
2.43.0

