From f196042715861c28846f3e01a394931c00860de2 Mon Sep 17 00:00:00 2001
From: Gabriel Fougeron <gabriel.fougeron@hotmail.fr>
Date: Wed, 16 Mar 2022 16:53:07 +0100
Subject: [PATCH] Changed a few files

---
 Makefile                                 | 249 +----------------------
 SuiteSparse_config/SuiteSparse_config.mk |  23 ++-
 metis-5.1.0/CMakeLists.txt               |   4 +-
 3 files changed, 22 insertions(+), 254 deletions(-)

diff --git a/Makefile b/Makefile
index ed722693..3a5067db 100644
--- a/Makefile
+++ b/Makefile
@@ -5,70 +5,23 @@
 SUITESPARSE = $(CURDIR)
 export SUITESPARSE
 
-default: go
+default: install
 
 include SuiteSparse_config/SuiteSparse_config.mk
 
-# Compile the default rules for each package.  Compiled libraries for all
-# packages are placed in SuiteSparse/lib, except for Mongoose and GraphBLAS.
-# Those two packages use CMake, and their compiled libraries are placed in
-# Mongoose/build and GraphBLAS/build, respectively.  Then "make install"
-# installs all libraries SuiteSparse/lib.
-go: metis
-	( cd SuiteSparse_config && $(MAKE) )
-	( cd Mongoose && $(MAKE) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' )
-	( cd AMD && $(MAKE) )
-	( cd BTF && $(MAKE) )
-	( cd CAMD && $(MAKE) )
-	( cd CCOLAMD && $(MAKE) )
-	( cd COLAMD && $(MAKE) )
-	( cd CHOLMOD && $(MAKE) )
-	( cd CSparse && $(MAKE) )
-	( cd CXSparse && $(MAKE) )
-	( cd LDL && $(MAKE) )
-	( cd KLU && $(MAKE) )
-	( cd UMFPACK && $(MAKE) )
-	( cd RBio && $(MAKE) )
-ifneq ($(GPU_CONFIG),)
-	( cd SuiteSparse_GPURuntime && $(MAKE) )
-	( cd GPUQREngine && $(MAKE) )
-endif
-	( cd SPQR && $(MAKE) )
-	( cd GraphBLAS && $(MAKE) JOBS=$(JOBS) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' )
-	( cd SLIP_LU && $(MAKE) )
-#	( cd PIRO_BAND && $(MAKE) )
-#	( cd SKYLINE_SVD && $(MAKE) )
 
 # install all packages in SuiteSparse/lib and SuiteSparse/include.  Use the
 # following command to install in /usr/local/lib and /usr/local/include:
 #       sudo make install INSTALL=/usr/local
 # See SuiteSparse/README.md for more details.
-# (note that CSparse is not installed; CXSparse is installed instead)
-install: metisinstall gbinstall moninstall
+install: metisinstall
 	( cd SuiteSparse_config && $(MAKE) install )
-	# ( cd Mongoose  && $(MAKE) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' install )
 	( cd AMD && $(MAKE) install )
-	( cd BTF && $(MAKE) install )
 	( cd CAMD && $(MAKE) install )
 	( cd CCOLAMD && $(MAKE) install )
 	( cd COLAMD && $(MAKE) install )
 	( cd CHOLMOD && $(MAKE) install )
-	( cd CXSparse && $(MAKE) install )
-	( cd LDL && $(MAKE) install )
-	( cd KLU && $(MAKE) install )
-	( cd UMFPACK && $(MAKE) install )
-	( cd RBio && $(MAKE) install )
-ifneq (,$(GPU_CONFIG))
-	( cd SuiteSparse_GPURuntime && $(MAKE) install )
-	( cd GPUQREngine && $(MAKE) install )
-endif
 	( cd SPQR && $(MAKE) install )
-	# ( cd GraphBLAS && $(MAKE) JOBS=$(JOBS) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' install )
-#	( cd PIRO_BAND && $(MAKE) install )
-#	( cd SKYLINE_SVD && $(MAKE) install )
-	( cd SLIP_LU && $(MAKE) install )
-	$(CP) README.md $(INSTALL_DOC)/SuiteSparse_README.md
-	chmod 644 $(INSTALL_DOC)/SuiteSparse_README.md
 
 metisinstall: metis
 ifeq (,$(MY_METIS_LIB))
@@ -77,202 +30,27 @@ ifeq (,$(MY_METIS_LIB))
 	@mkdir -p $(INSTALL_INCLUDE)
 	@mkdir -p $(INSTALL_DOC)
 	- $(CP) lib/libmetis.* $(INSTALL_LIB)
-	- $(CP) metis-5.1.0/manual/manual.pdf $(INSTALL_DOC)/METIS_manual.pdf
-	- $(CP) metis-5.1.0/README.txt $(INSTALL_DOC)/METIS_README.txt
         # the following is needed only on the Mac, so *.dylib is hardcoded:
 	$(SO_INSTALL_NAME) $(INSTALL_LIB)/libmetis.dylib $(INSTALL_LIB)/libmetis.dylib
 	- $(CP) include/metis.h $(INSTALL_INCLUDE)
 	chmod 755 $(INSTALL_LIB)/libmetis.*
 	chmod 644 $(INSTALL_INCLUDE)/metis.h
-	chmod 644 $(INSTALL_DOC)/METIS_manual.pdf
-	chmod 644 $(INSTALL_DOC)/METIS_README.txt
-endif
-
-# uninstall all packages
-uninstall:
-	$(RM) $(INSTALL_DOC)/SuiteSparse_README.md
-	( cd SuiteSparse_config && $(MAKE) uninstall )
-	- ( cd metis-5.1.0 && $(MAKE) uninstall )
-	- ( cd GraphBLAS && $(MAKE) uninstall )
-	- ( cd Mongoose  && $(MAKE) uninstall )
-	( cd AMD && $(MAKE) uninstall )
-	( cd CAMD && $(MAKE) uninstall )
-	( cd COLAMD && $(MAKE) uninstall )
-	( cd BTF && $(MAKE) uninstall )
-	( cd KLU && $(MAKE) uninstall )
-	( cd LDL && $(MAKE) uninstall )
-	( cd CCOLAMD && $(MAKE) uninstall )
-	( cd UMFPACK && $(MAKE) uninstall )
-	( cd CHOLMOD && $(MAKE) uninstall )
-	( cd CSparse && $(MAKE) uninstall )
-	( cd CXSparse && $(MAKE) uninstall )
-	( cd RBio && $(MAKE) uninstall )
-	( cd SuiteSparse_GPURuntime && $(MAKE) uninstall )
-	( cd GPUQREngine && $(MAKE) uninstall )
-	( cd SPQR && $(MAKE) uninstall )
-	( cd SLIP_LU && $(MAKE) uninstall )
-#	( cd PIRO_BAND && $(MAKE) uninstall )
-#	( cd SKYLINE_SVD && $(MAKE) uninstall )
-ifeq (,$(MY_METIS_LIB))
-        # uninstall METIS, which came from SuiteSparse/metis-5.1.0
-	$(RM) $(INSTALL_LIB)/libmetis.*
-	$(RM) $(INSTALL_INCLUDE)/metis.h
-	$(RM) $(INSTALL_DOC)/METIS_manual.pdf
-	$(RM) $(INSTALL_DOC)/METIS_README.txt
-endif
-	$(RM) -r $(INSTALL_DOC)
-
-# compile the dynamic libraries.  For GraphBLAS and Mongoose, this also builds
-# the static library
-library: metis
-	( cd SuiteSparse_config && $(MAKE) )
-	( cd Mongoose  && $(MAKE) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' library )
-	( cd AMD && $(MAKE) library )
-	( cd BTF && $(MAKE) library )
-	( cd CAMD && $(MAKE) library )
-	( cd CCOLAMD && $(MAKE) library )
-	( cd COLAMD && $(MAKE) library )
-	( cd CHOLMOD && $(MAKE) library )
-	( cd KLU && $(MAKE) library )
-	( cd LDL && $(MAKE) library )
-	( cd UMFPACK && $(MAKE) library )
-	( cd CSparse && $(MAKE) library )
-	( cd CXSparse && $(MAKE) library )
-	( cd RBio && $(MAKE) library )
-ifneq (,$(GPU_CONFIG))
-	( cd SuiteSparse_GPURuntime && $(MAKE) library )
-	( cd GPUQREngine && $(MAKE) library )
-endif
-	( cd SPQR && $(MAKE) library )
-	( cd GraphBLAS && $(MAKE) JOBS=$(JOBS) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' library )
-	( cd SLIP_LU && $(MAKE) library )
-#	( cd PIRO_BAND && $(MAKE) library )
-#	( cd SKYLINE_SVD && $(MAKE) library )
-
-# compile the static libraries (except for metis, GraphBLAS, and Mongoose).
-# metis is only dynamic, and the 'make static' for GraphBLAS and Mongoose makes
-# both the dynamic and static libraries.
-static: metis
-	( cd SuiteSparse_config && $(MAKE) static )
-	( cd Mongoose  && $(MAKE) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' static )
-	( cd AMD && $(MAKE) static )
-	( cd BTF && $(MAKE) static )
-	( cd CAMD && $(MAKE) static )
-	( cd CCOLAMD && $(MAKE) static )
-	( cd COLAMD && $(MAKE) static )
-	( cd CHOLMOD && $(MAKE) static )
-	( cd KLU && $(MAKE) static )
-	( cd LDL && $(MAKE) static )
-	( cd UMFPACK && $(MAKE) static )
-	( cd CSparse && $(MAKE) static )
-	( cd CXSparse && $(MAKE) static )
-	( cd RBio && $(MAKE) static )
-ifneq (,$(GPU_CONFIG))
-	( cd SuiteSparse_GPURuntime && $(MAKE) static )
-	( cd GPUQREngine && $(MAKE) static )
 endif
-	( cd SPQR && $(MAKE) static )
-	( cd GraphBLAS && $(MAKE) JOBS=$(JOBS) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' static )
-	( cd SLIP_LU && $(MAKE) static )
-#	( cd PIRO_BAND && $(MAKE) static )
-#	( cd SKYLINE_SVD && $(MAKE) static )
 
 # Remove all files not in the original distribution
 purge:
 	- ( cd SuiteSparse_config && $(MAKE) purge )
 	- ( cd metis-5.1.0 && $(MAKE) distclean )
 	- ( cd AMD && $(MAKE) purge )
-	- ( cd GraphBLAS && $(MAKE) purge )
-	- ( cd Mongoose  && $(MAKE) purge )
 	- ( cd CAMD && $(MAKE) purge )
 	- ( cd COLAMD && $(MAKE) purge )
-	- ( cd BTF && $(MAKE) purge )
-	- ( cd KLU && $(MAKE) purge )
-	- ( cd LDL && $(MAKE) purge )
 	- ( cd CCOLAMD && $(MAKE) purge )
-	- ( cd UMFPACK && $(MAKE) purge )
 	- ( cd CHOLMOD && $(MAKE) purge )
-	- ( cd CSparse && $(MAKE) purge )
-	- ( cd CXSparse && $(MAKE) purge )
-	- ( cd RBio && $(MAKE) purge )
-	- ( cd MATLAB_Tools/SuiteSparseCollection && $(RM) *.mex* )
-	- ( cd MATLAB_Tools/SSMULT && $(RM) *.mex* )
-	- ( cd SuiteSparse_GPURuntime && $(MAKE) purge )
-	- ( cd GPUQREngine && $(MAKE) purge )
 	- ( cd SPQR && $(MAKE) purge )
-	- ( cd SLIP_LU && $(MAKE) purge )
-#	- ( cd PIRO_BAND && $(MAKE) purge )
-#	- ( cd SKYLINE_SVD && $(MAKE) purge )
-	- $(RM) MATLAB_Tools/*/*.mex* MATLAB_Tools/spok/private/*.mex*
 	- $(RM) -r include/* bin/* lib/* share/*
 
-# Remove all files not in the original distribution, but keep the libraries
-clean:
-	- ( cd SuiteSparse_config && $(MAKE) clean )
-	- ( cd metis-5.1.0 && $(MAKE) clean )
-	- ( cd GraphBLAS && $(MAKE) clean )
-	- ( cd Mongoose  && $(MAKE) clean )
-	- ( cd AMD && $(MAKE) clean )
-	- ( cd CAMD && $(MAKE) clean )
-	- ( cd COLAMD && $(MAKE) clean )
-	- ( cd BTF && $(MAKE) clean )
-	- ( cd KLU && $(MAKE) clean )
-	- ( cd LDL && $(MAKE) clean )
-	- ( cd CCOLAMD && $(MAKE) clean )
-	- ( cd UMFPACK && $(MAKE) clean )
-	- ( cd CHOLMOD && $(MAKE) clean )
-	- ( cd CSparse && $(MAKE) clean )
-	- ( cd CXSparse && $(MAKE) clean )
-	- ( cd RBio && $(MAKE) clean )
-	- ( cd SuiteSparse_GPURuntime && $(MAKE) clean )
-	- ( cd GPUQREngine && $(MAKE) clean )
-	- ( cd SPQR && $(MAKE) clean )
-	- ( cd SLIP_LU && $(MAKE) clean )
-#	- ( cd PIRO_BAND && $(MAKE) clean )
-#	- ( cd SKYLINE_SVD && $(MAKE) clean )
-
-# Create the PDF documentation
-docs:
-	( cd GraphBLAS && $(MAKE) docs )
-	( cd Mongoose  && $(MAKE) docs )
-	( cd AMD && $(MAKE) docs )
-	( cd CAMD && $(MAKE) docs )
-	( cd KLU && $(MAKE) docs )
-	( cd LDL && $(MAKE) docs )
-	( cd UMFPACK && $(MAKE) docs )
-	( cd CHOLMOD && $(MAKE) docs )
-	( cd SPQR && $(MAKE) docs )
-	( cd SLIP_LU && $(MAKE) docs )
-#	( cd PIRO_BAND && $(MAKE) docs )
-#	( cd SKYLINE_SVD && $(MAKE) docs )
-
 distclean: purge
 
-# Create CXSparse from CSparse
-# Note that the CXSparse directory should initially not exist.
-cx:
-	( cd CSparse ; $(MAKE) purge )
-	( cd SuiteSparse_config && $(MAKE) )
-	( cd CXSparse_newfiles ; tar cfv - * | gzip -9 > ../CXSparse_newfiles.tar.gz )
-	./CSparse_to_CXSparse CSparse CXSparse CXSparse_newfiles.tar.gz
-	( cd CXSparse/Demo ; $(MAKE) )
-	( cd CXSparse/Demo ; $(MAKE) > cs_demo.out )
-	( cd CXSparse ; $(MAKE) purge )
-	$(RM) -f CXSparse_newfiles.tar.gz
-
-# statement coverage (Linux only); this requires a lot of time.
-# The umfpack tcov requires a lot of disk space in /tmp
-cov: purge
-	( cd CXSparse && $(MAKE) cov )
-	( cd CSparse && $(MAKE) cov )
-	( cd CHOLMOD && $(MAKE) cov )
-	( cd KLU && $(MAKE) cov )
-	( cd SPQR && $(MAKE) cov )
-	( cd UMFPACK && $(MAKE) cov )
-	( cd SLIP_LU && $(MAKE) cov )
-#	( cd PIRO_BAND && $(MAKE) cov )
-#	( cd SKYLINE_SVD && $(MAKE) cov )
-
 # configure and compile METIS, placing the libmetis.* library in
 # SuiteSparse/lib and the metis.h include file in SuiteSparse/include.
 metis: include/metis.h
@@ -291,27 +69,4 @@ else
 	@echo 'Using pre-installed METIS 5.1.0 library at ' '[$(MY_METIS_LIB)]'
 endif
 
-# just compile GraphBLAS
-gb:
-	echo $(CMAKE_OPTIONS)
-	( cd GraphBLAS && $(MAKE) JOBS=$(JOBS) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' )
-
-# compile and install GraphBLAS
-gbinstall: gb
-	echo $(CMAKE_OPTIONS)
-	( cd GraphBLAS && $(MAKE) JOBS=$(JOBS) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' install )
-
-# compile and install GraphBLAS libgraphblas_renamed, for MATLAB
-gbrenamed:
-	echo $(CMAKE_OPTIONS)
-	( cd GraphBLAS/GraphBLAS && $(MAKE) JOBS=$(JOBS) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' )
-	( cd GraphBLAS/GraphBLAS && $(MAKE) JOBS=$(JOBS) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' install )
-
-# just compile Mongoose
-mon:
-	( cd Mongoose && $(MAKE) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' )
-
-# compile and install Mongoose
-moninstall: mon
-	( cd Mongoose  && $(MAKE) CMAKE_OPTIONS='$(CMAKE_OPTIONS)' install )
 
diff --git a/SuiteSparse_config/SuiteSparse_config.mk b/SuiteSparse_config/SuiteSparse_config.mk
index 9ca0a065..9a27d3ae 100644
--- a/SuiteSparse_config/SuiteSparse_config.mk
+++ b/SuiteSparse_config/SuiteSparse_config.mk
@@ -7,7 +7,7 @@
 # and GraphBLAS.  The configuration settings for GraphBLAS are determined by
 # GraphBLAS/CMakeLists.txt
 
-SUITESPARSE_VERSION = 5.11.0
+SUITESPARSE_VERSION = 5.10.1
 
     #---------------------------------------------------------------------------
     # determine what system we are on
@@ -187,7 +187,7 @@ SUITESPARSE_VERSION = 5.11.0
             #   -Wl,--end-group -lpthread -lm
             # using dynamic linking:
             ifeq ($(UNAME),Linux)
-                BLAS ?= -lmkl_intel_lp64 -lmkl_gnu_thread -lmkl_core -lgomp -lpthread -lm -ldl
+                BLAS ?= -lmkl_intel_lp64 -lmkl_core -lmkl_intel_thread -liomp5 -lpthread -lm
                 LAPACK ?=
             endif
         else
@@ -225,7 +225,8 @@ SUITESPARSE_VERSION = 5.11.0
 
     # CUDA is detected automatically, and used if found.  To disable CUDA,
     # use CUDA=no
-    CUDA = auto
+    # CUDA = auto
+    CUDA = no
 
     ifneq ($(CUDA),no)
         CUDA_PATH = $(shell which nvcc 2>/dev/null | sed "s/\/bin\/nvcc//")
@@ -261,6 +262,8 @@ SUITESPARSE_VERSION = 5.11.0
                 MAGMA_LIB     = -L/opt/magma-2.4.0/lib/ -lmagma
         NVCC          = $(CUDA_PATH)/bin/nvcc
         NVCCFLAGS     = -Xcompiler -fPIC -O3 \
+                            -gencode=arch=compute_50,code=sm_50 \
+                            -gencode=arch=compute_53,code=sm_53 \
                             -gencode=arch=compute_53,code=sm_53 \
                             -gencode=arch=compute_60,code=compute_60
     endif
@@ -334,10 +337,18 @@ SUITESPARSE_VERSION = 5.11.0
     #
     # -DNPARTITION      do not include the CHOLMOD partition module
     # -DNEXPERT         do not include the functions in SuiteSparseQR_expert.cpp
+    # -DHAVE_TBB        enable the use of Intel's Threading Building Blocks
     # -DGPU_BLAS        enable the use of the CUDA BLAS
 
     SPQR_CONFIG ?= $(GPU_CONFIG)
 
+    # to compile with Intel's TBB, use TBB=-ltbb -DSPQR_CONFIG=-DHAVE_TBB
+    TBB ?=
+    # TBB = -ltbb -DSPQR_CONFIG=-DHAVE_TBB
+
+    # TODO: this *mk file should auto-detect the presence of Intel's TBB,
+    # and set the compiler flags accordingly.
+
 #===============================================================================
 # System-dependent configurations
 #===============================================================================
@@ -349,7 +360,6 @@ SUITESPARSE_VERSION = 5.11.0
     ifeq ($(UNAME),Linux)
         # add the posix realtime extensions library: librt
         LDLIBS += -lrt
-        LDFLAGS += -Wl,-rpath=$(INSTALL_LIB)
     endif
 
     #---------------------------------------------------------------------------
@@ -468,7 +478,9 @@ else
         SO_PLAIN  = $(LIBRARY).so
         SO_MAIN   = $(LIBRARY).so.$(SO_VERSION)
         SO_TARGET = $(LIBRARY).so.$(VERSION)
-        SO_OPTS  += -shared -Wl,-soname -Wl,$(SO_MAIN) -Wl,--no-undefined \
+#        SO_OPTS  += -shared -Wl,-soname -Wl,$(SO_MAIN) -Wl,--no-undefined \
+#                     -Wl,-rpath,'$$ORIGIN' -Wl,-z,origin
+        SO_OPTS  += -shared -Wl,-soname -Wl,$(SO_MAIN)  \
                      -Wl,-rpath,'$$ORIGIN' -Wl,-z,origin
         # Use rpath ORIGIN so that Linux/Unix *.so files can be moved without modification:
         SO_INSTALL_NAME = echo
@@ -574,6 +586,7 @@ config:
 	@echo 'parallel make jobs:       JOBS=           ' '$(JOBS)'
 	@echo 'BLAS library:             BLAS=           ' '$(BLAS)'
 	@echo 'LAPACK library:           LAPACK=         ' '$(LAPACK)'
+	@echo 'Intel TBB library:        TBB=            ' '$(TBB)'
 	@echo 'Other libraries:          LDLIBS=         ' '$(LDLIBS)'
 	@echo 'static library:           AR_TARGET=      ' '$(AR_TARGET)'
 	@echo 'shared library (full):    SO_TARGET=      ' '$(SO_TARGET)'
diff --git a/metis-5.1.0/CMakeLists.txt b/metis-5.1.0/CMakeLists.txt
index 1a72ed0d..b60e262e 100644
--- a/metis-5.1.0/CMakeLists.txt
+++ b/metis-5.1.0/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.13)
+cmake_minimum_required(VERSION 2.8)
 project(METIS)
 
 set(GKLIB_PATH "GKlib" CACHE PATH "path to GKlib")
@@ -25,4 +25,4 @@ include_directories(include)
 # Recursively look for CMakeLists.txt in subdirs.
 add_subdirectory("include")
 add_subdirectory("libmetis")
-add_subdirectory("programs")
+#add_subdirectory("programs")
-- 
2.25.1

