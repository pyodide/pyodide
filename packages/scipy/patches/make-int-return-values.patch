From a35a645a2d24015bd2a7baaf5bf81aac2b0c312c Mon Sep 17 00:00:00 2001
From: Roman Yurchak <rth.yurchak@gmail.com>
Date: Sat, 27 Feb 2021 13:49:06 +0100
Subject: [PATCH] make int return values

---
 scipy/_build_utils/src/wrap_dummy_g77_abi.f   |  16 --
 scipy/interpolate/src/_fitpackmodule.c        |  24 +-
 scipy/linalg/cython_blas_signatures.txt       | 256 +++++++++---------
 scipy/linalg/cython_lapack_signatures.txt     |   7 +-
 scipy/linalg/fblas_l1.pyf.src                 |  78 ++++--
 scipy/linalg/setup.py                         |   7 +-
 scipy/optimize/_lsq/setup.py                  |   2 +-
 .../sparse/linalg/dsolve/SuperLU/SRC/cgsrfs.c |   7 -
 .../sparse/linalg/dsolve/SuperLU/SRC/dgscon.c |   3 -
 .../sparse/linalg/dsolve/SuperLU/SRC/dgsrfs.c |   7 -
 .../dsolve/SuperLU/SRC/ilu_ccopy_to_ucol.c    |   2 -
 .../linalg/dsolve/SuperLU/SRC/ilu_cdrop_row.c |   9 -
 .../dsolve/SuperLU/SRC/ilu_dcopy_to_ucol.c    |   1 -
 .../linalg/dsolve/SuperLU/SRC/ilu_ddrop_row.c |   7 -
 .../dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c    |   2 +-
 .../linalg/dsolve/SuperLU/SRC/ilu_sdrop_row.c |   7 -
 .../dsolve/SuperLU/SRC/ilu_zcopy_to_ucol.c    |   1 -
 .../linalg/dsolve/SuperLU/SRC/ilu_zdrop_row.c |   9 -
 .../dsolve/SuperLU/SRC/scipy_slu_config.h     |   8 +
 .../sparse/linalg/dsolve/SuperLU/SRC/sgsrfs.c |   7 -
 .../sparse/linalg/dsolve/SuperLU/SRC/sgssvx.c |   7 +-
 .../linalg/dsolve/SuperLU/SRC/slu_dcomplex.h  |   5 +-
 .../linalg/dsolve/SuperLU/SRC/slu_scomplex.h  |   5 +-
 .../linalg/dsolve/SuperLU/SRC/slu_util.h      |   1 -
 .../sparse/linalg/dsolve/SuperLU/SRC/zgsrfs.c |   7 -
 scipy/sparse/linalg/dsolve/_superlu_utils.c   |   4 +-
 .../linalg/eigen/arpack/ARPACK/SRC/debug.h    |  20 +-
 .../linalg/eigen/arpack/ARPACK/SRC/stat.h     |  26 +-
 28 files changed, 250 insertions(+), 285 deletions(-)

diff --git a/scipy/_build_utils/src/wrap_dummy_g77_abi.f b/scipy/_build_utils/src/wrap_dummy_g77_abi.f
index caf99ac63..73cdebd96 100644
--- a/scipy/_build_utils/src/wrap_dummy_g77_abi.f
+++ b/scipy/_build_utils/src/wrap_dummy_g77_abi.f
@@ -6,14 +6,6 @@
       WCDOTC = CDOTC( N, CX, INCX, CY, INCY )
       END FUNCTION
 
-      COMPLEX FUNCTION WCDOTU( N, CX, INCX, CY, INCY )
-      INTEGER INCX, INCY, N
-      COMPLEX CX(*), CY(*)
-      EXTERNAL CDOTU
-      COMPLEX CDOTU
-      WCDOTU = CDOTU( N, CX, INCX, CY, INCY )
-      END FUNCTION
-
       DOUBLE COMPLEX FUNCTION WZDOTC( N, CX, INCX, CY, INCY )
       INTEGER INCX, INCY, N
       DOUBLE COMPLEX CX(*), CY(*)
@@ -22,14 +14,6 @@
       WZDOTC = ZDOTC( N, CX, INCX, CY, INCY )
       END FUNCTION
 
-      DOUBLE COMPLEX FUNCTION WZDOTU( N, CX, INCX, CY, INCY )
-      INTEGER INCX, INCY, N
-      DOUBLE COMPLEX CX(*), CY(*)
-      EXTERNAL ZDOTU
-      DOUBLE COMPLEX ZDOTU
-      WZDOTU = ZDOTU( N, CX, INCX, CY, INCY )
-      END FUNCTION
-
       COMPLEX FUNCTION WCLADIV( X, Y )
       COMPLEX            X, Y
       EXTERNAL           CLADIV
diff --git a/scipy/interpolate/src/_fitpackmodule.c b/scipy/interpolate/src/_fitpackmodule.c
index ba44a4993..954806add 100644
--- a/scipy/interpolate/src/_fitpackmodule.c
+++ b/scipy/interpolate/src/_fitpackmodule.c
@@ -122,35 +122,35 @@ static PyObject *fitpack_error;
 	#endif
 #endif
 
-void CURFIT(F_INT*,F_INT*,double*,double*,double*,double*,
+int CURFIT(F_INT*,F_INT*,double*,double*,double*,double*,
         double*,F_INT*,double*,F_INT*,F_INT*,double*,double*,
         double*,double*,F_INT*,F_INT*,F_INT*);
-void PERCUR(F_INT*,F_INT*,double*,double*,double*,F_INT*,
+int PERCUR(F_INT*,F_INT*,double*,double*,double*,F_INT*,
         double*,F_INT*,F_INT*,double*,double*,double*,
         double*,F_INT*,F_INT*,F_INT*);
-void SPALDE(double*,F_INT*,double*,F_INT*,double*,double*,F_INT*);
-void SPLDER(double*,F_INT*,double*,F_INT*,F_INT*,double*,
+int SPALDE(double*,F_INT*,double*,F_INT*,double*,double*,F_INT*);
+int SPLDER(double*,F_INT*,double*,F_INT*,F_INT*,double*,
         double*,F_INT*,F_INT*,double*,F_INT*);
-void SPLEV(double*,F_INT*,double*,F_INT*,double*,double*,F_INT*,F_INT*,F_INT*);
+int SPLEV(double*,F_INT*,double*,F_INT*,double*,double*,F_INT*,F_INT*,F_INT*);
 double SPLINT(double*,F_INT*,double*,F_INT*,double*,double*,double*);
-void SPROOT(double*,F_INT*,double*,double*,F_INT*,F_INT*,F_INT*);
-void PARCUR(F_INT*,F_INT*,F_INT*,F_INT*,double*,F_INT*,double*,
+int SPROOT(double*,F_INT*,double*,double*,F_INT*,F_INT*,F_INT*);
+int PARCUR(F_INT*,F_INT*,F_INT*,F_INT*,double*,F_INT*,double*,
         double*,double*,double*,F_INT*,double*,F_INT*,F_INT*,
         double*,F_INT*,double*,double*,double*,F_INT*,F_INT*,F_INT*);
-void CLOCUR(F_INT*,F_INT*,F_INT*,F_INT*,double*,F_INT*,double*,
+int CLOCUR(F_INT*,F_INT*,F_INT*,F_INT*,double*,F_INT*,double*,
         double*,F_INT*,double*,F_INT*,F_INT*,double*,F_INT*,
         double*,double*,double*,F_INT*,F_INT*,F_INT*);
-void SURFIT(F_INT*,F_INT*,double*,double*,double*,double*,
+int SURFIT(F_INT*,F_INT*,double*,double*,double*,double*,
         double*,double*,double*,double*,F_INT*,F_INT*,double*,
         F_INT*,F_INT*,F_INT*,double*,F_INT*,double*,F_INT*,double*,
         double*,double*,double*,F_INT*,double*,F_INT*,F_INT*,F_INT*,F_INT*);
-void BISPEV(double*,F_INT*,double*,F_INT*,double*,F_INT*,F_INT*,
+int BISPEV(double*,F_INT*,double*,F_INT*,double*,F_INT*,F_INT*,
         double*,F_INT*,double*,F_INT*,double*,double*,F_INT*,
         F_INT*,F_INT*,F_INT*);
-void PARDER(double*,F_INT*,double*,F_INT*,double*,F_INT*,F_INT*,
+int PARDER(double*,F_INT*,double*,F_INT*,double*,F_INT*,F_INT*,
         F_INT*,F_INT*,double*,F_INT*,double*,F_INT*,double*,
         double*,F_INT*,F_INT*,F_INT*,F_INT*);
-void INSERT(F_INT*,double*,F_INT*,double*,F_INT*,double*,double*,
+int INSERT(F_INT*,double*,F_INT*,double*,F_INT*,double*,double*,
         F_INT*,double*,F_INT*,F_INT*);
 
 /* Note that curev, cualde need no interface. */
diff --git a/scipy/linalg/cython_blas_signatures.txt b/scipy/linalg/cython_blas_signatures.txt
index 70bdc0f47..d5f2d4f44 100644
--- a/scipy/linalg/cython_blas_signatures.txt
+++ b/scipy/linalg/cython_blas_signatures.txt
@@ -1,76 +1,76 @@
 # This file was generated by _cython_signature_generator.py
 # Do not edit this file directly.
 
-void caxpy(int *n, c *ca, c *cx, int *incx, c *cy, int *incy)
-void ccopy(int *n, c *cx, int *incx, c *cy, int *incy)
+int caxpy(int *n, c *ca, c *cx, int *incx, c *cy, int *incy)
+int ccopy(int *n, c *cx, int *incx, c *cy, int *incy)
 c cdotc(int *n, c *cx, int *incx, c *cy, int *incy)
-c cdotu(int *n, c *cx, int *incx, c *cy, int *incy)
-void cgbmv(char *trans, int *m, int *n, int *kl, int *ku, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)
-void cgemm(char *transa, char *transb, int *m, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)
-void cgemv(char *trans, int *m, int *n, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)
-void cgerc(int *m, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)
-void cgeru(int *m, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)
-void chbmv(char *uplo, int *n, int *k, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)
-void chemm(char *side, char *uplo, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)
-void chemv(char *uplo, int *n, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)
-void cher(char *uplo, int *n, s *alpha, c *x, int *incx, c *a, int *lda)
-void cher2(char *uplo, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)
-void cher2k(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, s *beta, c *c, int *ldc)
-void cherk(char *uplo, char *trans, int *n, int *k, s *alpha, c *a, int *lda, s *beta, c *c, int *ldc)
-void chpmv(char *uplo, int *n, c *alpha, c *ap, c *x, int *incx, c *beta, c *y, int *incy)
-void chpr(char *uplo, int *n, s *alpha, c *x, int *incx, c *ap)
-void chpr2(char *uplo, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *ap)
-void crotg(c *ca, c *cb, s *c, c *s)
-void cscal(int *n, c *ca, c *cx, int *incx)
-void csrot(int *n, c *cx, int *incx, c *cy, int *incy, s *c, s *s)
-void csscal(int *n, s *sa, c *cx, int *incx)
-void cswap(int *n, c *cx, int *incx, c *cy, int *incy)
-void csymm(char *side, char *uplo, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)
-void csyr2k(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)
-void csyrk(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *beta, c *c, int *ldc)
-void ctbmv(char *uplo, char *trans, char *diag, int *n, int *k, c *a, int *lda, c *x, int *incx)
-void ctbsv(char *uplo, char *trans, char *diag, int *n, int *k, c *a, int *lda, c *x, int *incx)
-void ctpmv(char *uplo, char *trans, char *diag, int *n, c *ap, c *x, int *incx)
-void ctpsv(char *uplo, char *trans, char *diag, int *n, c *ap, c *x, int *incx)
-void ctrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb)
-void ctrmv(char *uplo, char *trans, char *diag, int *n, c *a, int *lda, c *x, int *incx)
-void ctrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb)
-void ctrsv(char *uplo, char *trans, char *diag, int *n, c *a, int *lda, c *x, int *incx)
+int cdotu(c *res, int *n, c *cx, int *incx, c *cy, int *incy)
+int cgbmv(char *trans, int *m, int *n, int *kl, int *ku, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)
+int cgemm(char *transa, char *transb, int *m, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)
+int cgemv(char *trans, int *m, int *n, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)
+int cgerc(int *m, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)
+int cgeru(int *m, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)
+int chbmv(char *uplo, int *n, int *k, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)
+int chemm(char *side, char *uplo, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)
+int chemv(char *uplo, int *n, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)
+int cher(char *uplo, int *n, s *alpha, c *x, int *incx, c *a, int *lda)
+int cher2(char *uplo, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)
+int cher2k(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, s *beta, c *c, int *ldc)
+int cherk(char *uplo, char *trans, int *n, int *k, s *alpha, c *a, int *lda, s *beta, c *c, int *ldc)
+int chpmv(char *uplo, int *n, c *alpha, c *ap, c *x, int *incx, c *beta, c *y, int *incy)
+int chpr(char *uplo, int *n, s *alpha, c *x, int *incx, c *ap)
+int chpr2(char *uplo, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *ap)
+int crotg(c *ca, c *cb, s *c, c *s)
+int cscal(int *n, c *ca, c *cx, int *incx)
+int csrot(int *n, c *cx, int *incx, c *cy, int *incy, s *c, s *s)
+int csscal(int *n, s *sa, c *cx, int *incx)
+int cswap(int *n, c *cx, int *incx, c *cy, int *incy)
+int csymm(char *side, char *uplo, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)
+int csyr2k(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)
+int csyrk(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *beta, c *c, int *ldc)
+int ctbmv(char *uplo, char *trans, char *diag, int *n, int *k, c *a, int *lda, c *x, int *incx)
+int ctbsv(char *uplo, char *trans, char *diag, int *n, int *k, c *a, int *lda, c *x, int *incx)
+int ctpmv(char *uplo, char *trans, char *diag, int *n, c *ap, c *x, int *incx)
+int ctpsv(char *uplo, char *trans, char *diag, int *n, c *ap, c *x, int *incx)
+int ctrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb)
+int ctrmv(char *uplo, char *trans, char *diag, int *n, c *a, int *lda, c *x, int *incx)
+int ctrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb)
+int ctrsv(char *uplo, char *trans, char *diag, int *n, c *a, int *lda, c *x, int *incx)
 d dasum(int *n, d *dx, int *incx)
-void daxpy(int *n, d *da, d *dx, int *incx, d *dy, int *incy)
+int daxpy(int *n, d *da, d *dx, int *incx, d *dy, int *incy)
 d dcabs1(z *z)
-void dcopy(int *n, d *dx, int *incx, d *dy, int *incy)
+int dcopy(int *n, d *dx, int *incx, d *dy, int *incy)
 d ddot(int *n, d *dx, int *incx, d *dy, int *incy)
-void dgbmv(char *trans, int *m, int *n, int *kl, int *ku, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)
-void dgemm(char *transa, char *transb, int *m, int *n, int *k, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)
-void dgemv(char *trans, int *m, int *n, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)
-void dger(int *m, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *a, int *lda)
+int dgbmv(char *trans, int *m, int *n, int *kl, int *ku, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)
+int dgemm(char *transa, char *transb, int *m, int *n, int *k, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)
+int dgemv(char *trans, int *m, int *n, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)
+int dger(int *m, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *a, int *lda)
 d dnrm2(int *n, d *x, int *incx)
-void drot(int *n, d *dx, int *incx, d *dy, int *incy, d *c, d *s)
-void drotg(d *da, d *db, d *c, d *s)
-void drotm(int *n, d *dx, int *incx, d *dy, int *incy, d *dparam)
-void drotmg(d *dd1, d *dd2, d *dx1, d *dy1, d *dparam)
-void dsbmv(char *uplo, int *n, int *k, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)
-void dscal(int *n, d *da, d *dx, int *incx)
+int drot(int *n, d *dx, int *incx, d *dy, int *incy, d *c, d *s)
+int drotg(d *da, d *db, d *c, d *s)
+int drotm(int *n, d *dx, int *incx, d *dy, int *incy, d *dparam)
+int drotmg(d *dd1, d *dd2, d *dx1, d *dy1, d *dparam)
+int dsbmv(char *uplo, int *n, int *k, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)
+int dscal(int *n, d *da, d *dx, int *incx)
 d dsdot(int *n, s *sx, int *incx, s *sy, int *incy)
-void dspmv(char *uplo, int *n, d *alpha, d *ap, d *x, int *incx, d *beta, d *y, int *incy)
-void dspr(char *uplo, int *n, d *alpha, d *x, int *incx, d *ap)
-void dspr2(char *uplo, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *ap)
-void dswap(int *n, d *dx, int *incx, d *dy, int *incy)
-void dsymm(char *side, char *uplo, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)
-void dsymv(char *uplo, int *n, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)
-void dsyr(char *uplo, int *n, d *alpha, d *x, int *incx, d *a, int *lda)
-void dsyr2(char *uplo, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *a, int *lda)
-void dsyr2k(char *uplo, char *trans, int *n, int *k, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)
-void dsyrk(char *uplo, char *trans, int *n, int *k, d *alpha, d *a, int *lda, d *beta, d *c, int *ldc)
-void dtbmv(char *uplo, char *trans, char *diag, int *n, int *k, d *a, int *lda, d *x, int *incx)
-void dtbsv(char *uplo, char *trans, char *diag, int *n, int *k, d *a, int *lda, d *x, int *incx)
-void dtpmv(char *uplo, char *trans, char *diag, int *n, d *ap, d *x, int *incx)
-void dtpsv(char *uplo, char *trans, char *diag, int *n, d *ap, d *x, int *incx)
-void dtrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb)
-void dtrmv(char *uplo, char *trans, char *diag, int *n, d *a, int *lda, d *x, int *incx)
-void dtrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb)
-void dtrsv(char *uplo, char *trans, char *diag, int *n, d *a, int *lda, d *x, int *incx)
+int dspmv(char *uplo, int *n, d *alpha, d *ap, d *x, int *incx, d *beta, d *y, int *incy)
+int dspr(char *uplo, int *n, d *alpha, d *x, int *incx, d *ap)
+int dspr2(char *uplo, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *ap)
+int dswap(int *n, d *dx, int *incx, d *dy, int *incy)
+int dsymm(char *side, char *uplo, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)
+int dsymv(char *uplo, int *n, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)
+int dsyr(char *uplo, int *n, d *alpha, d *x, int *incx, d *a, int *lda)
+int dsyr2(char *uplo, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *a, int *lda)
+int dsyr2k(char *uplo, char *trans, int *n, int *k, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)
+int dsyrk(char *uplo, char *trans, int *n, int *k, d *alpha, d *a, int *lda, d *beta, d *c, int *ldc)
+int dtbmv(char *uplo, char *trans, char *diag, int *n, int *k, d *a, int *lda, d *x, int *incx)
+int dtbsv(char *uplo, char *trans, char *diag, int *n, int *k, d *a, int *lda, d *x, int *incx)
+int dtpmv(char *uplo, char *trans, char *diag, int *n, d *ap, d *x, int *incx)
+int dtpsv(char *uplo, char *trans, char *diag, int *n, d *ap, d *x, int *incx)
+int dtrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb)
+int dtrmv(char *uplo, char *trans, char *diag, int *n, d *a, int *lda, d *x, int *incx)
+int dtrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb)
+int dtrsv(char *uplo, char *trans, char *diag, int *n, d *a, int *lda, d *x, int *incx)
 d dzasum(int *n, z *zx, int *incx)
 d dznrm2(int *n, z *x, int *incx)
 int icamax(int *n, c *cx, int *incx)
@@ -79,73 +79,73 @@ int isamax(int *n, s *sx, int *incx)
 int izamax(int *n, z *zx, int *incx)
 bint lsame(char *ca, char *cb)
 s sasum(int *n, s *sx, int *incx)
-void saxpy(int *n, s *sa, s *sx, int *incx, s *sy, int *incy)
+int saxpy(int *n, s *sa, s *sx, int *incx, s *sy, int *incy)
 s scasum(int *n, c *cx, int *incx)
 s scnrm2(int *n, c *x, int *incx)
-void scopy(int *n, s *sx, int *incx, s *sy, int *incy)
+int scopy(int *n, s *sx, int *incx, s *sy, int *incy)
 s sdot(int *n, s *sx, int *incx, s *sy, int *incy)
 s sdsdot(int *n, s *sb, s *sx, int *incx, s *sy, int *incy)
-void sgbmv(char *trans, int *m, int *n, int *kl, int *ku, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)
-void sgemm(char *transa, char *transb, int *m, int *n, int *k, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)
-void sgemv(char *trans, int *m, int *n, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)
-void sger(int *m, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *a, int *lda)
+int sgbmv(char *trans, int *m, int *n, int *kl, int *ku, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)
+int sgemm(char *transa, char *transb, int *m, int *n, int *k, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)
+int sgemv(char *trans, int *m, int *n, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)
+int sger(int *m, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *a, int *lda)
 s snrm2(int *n, s *x, int *incx)
-void srot(int *n, s *sx, int *incx, s *sy, int *incy, s *c, s *s)
-void srotg(s *sa, s *sb, s *c, s *s)
-void srotm(int *n, s *sx, int *incx, s *sy, int *incy, s *sparam)
-void srotmg(s *sd1, s *sd2, s *sx1, s *sy1, s *sparam)
-void ssbmv(char *uplo, int *n, int *k, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)
-void sscal(int *n, s *sa, s *sx, int *incx)
-void sspmv(char *uplo, int *n, s *alpha, s *ap, s *x, int *incx, s *beta, s *y, int *incy)
-void sspr(char *uplo, int *n, s *alpha, s *x, int *incx, s *ap)
-void sspr2(char *uplo, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *ap)
-void sswap(int *n, s *sx, int *incx, s *sy, int *incy)
-void ssymm(char *side, char *uplo, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)
-void ssymv(char *uplo, int *n, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)
-void ssyr(char *uplo, int *n, s *alpha, s *x, int *incx, s *a, int *lda)
-void ssyr2(char *uplo, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *a, int *lda)
-void ssyr2k(char *uplo, char *trans, int *n, int *k, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)
-void ssyrk(char *uplo, char *trans, int *n, int *k, s *alpha, s *a, int *lda, s *beta, s *c, int *ldc)
-void stbmv(char *uplo, char *trans, char *diag, int *n, int *k, s *a, int *lda, s *x, int *incx)
-void stbsv(char *uplo, char *trans, char *diag, int *n, int *k, s *a, int *lda, s *x, int *incx)
-void stpmv(char *uplo, char *trans, char *diag, int *n, s *ap, s *x, int *incx)
-void stpsv(char *uplo, char *trans, char *diag, int *n, s *ap, s *x, int *incx)
-void strmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb)
-void strmv(char *uplo, char *trans, char *diag, int *n, s *a, int *lda, s *x, int *incx)
-void strsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb)
-void strsv(char *uplo, char *trans, char *diag, int *n, s *a, int *lda, s *x, int *incx)
-void zaxpy(int *n, z *za, z *zx, int *incx, z *zy, int *incy)
-void zcopy(int *n, z *zx, int *incx, z *zy, int *incy)
+int srot(int *n, s *sx, int *incx, s *sy, int *incy, s *c, s *s)
+int srotg(s *sa, s *sb, s *c, s *s)
+int srotm(int *n, s *sx, int *incx, s *sy, int *incy, s *sparam)
+int srotmg(s *sd1, s *sd2, s *sx1, s *sy1, s *sparam)
+int ssbmv(char *uplo, int *n, int *k, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)
+int sscal(int *n, s *sa, s *sx, int *incx)
+int sspmv(char *uplo, int *n, s *alpha, s *ap, s *x, int *incx, s *beta, s *y, int *incy)
+int sspr(char *uplo, int *n, s *alpha, s *x, int *incx, s *ap)
+int sspr2(char *uplo, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *ap)
+int sswap(int *n, s *sx, int *incx, s *sy, int *incy)
+int ssymm(char *side, char *uplo, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)
+int ssymv(char *uplo, int *n, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)
+int ssyr(char *uplo, int *n, s *alpha, s *x, int *incx, s *a, int *lda)
+int ssyr2(char *uplo, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *a, int *lda)
+int ssyr2k(char *uplo, char *trans, int *n, int *k, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)
+int ssyrk(char *uplo, char *trans, int *n, int *k, s *alpha, s *a, int *lda, s *beta, s *c, int *ldc)
+int stbmv(char *uplo, char *trans, char *diag, int *n, int *k, s *a, int *lda, s *x, int *incx)
+int stbsv(char *uplo, char *trans, char *diag, int *n, int *k, s *a, int *lda, s *x, int *incx)
+int stpmv(char *uplo, char *trans, char *diag, int *n, s *ap, s *x, int *incx)
+int stpsv(char *uplo, char *trans, char *diag, int *n, s *ap, s *x, int *incx)
+int strmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb)
+int strmv(char *uplo, char *trans, char *diag, int *n, s *a, int *lda, s *x, int *incx)
+int strsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb)
+int strsv(char *uplo, char *trans, char *diag, int *n, s *a, int *lda, s *x, int *incx)
+int zaxpy(int *n, z *za, z *zx, int *incx, z *zy, int *incy)
+int zcopy(int *n, z *zx, int *incx, z *zy, int *incy)
 z zdotc(int *n, z *zx, int *incx, z *zy, int *incy)
-z zdotu(int *n, z *zx, int *incx, z *zy, int *incy)
-void zdrot(int *n, z *cx, int *incx, z *cy, int *incy, d *c, d *s)
-void zdscal(int *n, d *da, z *zx, int *incx)
-void zgbmv(char *trans, int *m, int *n, int *kl, int *ku, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)
-void zgemm(char *transa, char *transb, int *m, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)
-void zgemv(char *trans, int *m, int *n, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)
-void zgerc(int *m, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)
-void zgeru(int *m, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)
-void zhbmv(char *uplo, int *n, int *k, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)
-void zhemm(char *side, char *uplo, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)
-void zhemv(char *uplo, int *n, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)
-void zher(char *uplo, int *n, d *alpha, z *x, int *incx, z *a, int *lda)
-void zher2(char *uplo, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)
-void zher2k(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, d *beta, z *c, int *ldc)
-void zherk(char *uplo, char *trans, int *n, int *k, d *alpha, z *a, int *lda, d *beta, z *c, int *ldc)
-void zhpmv(char *uplo, int *n, z *alpha, z *ap, z *x, int *incx, z *beta, z *y, int *incy)
-void zhpr(char *uplo, int *n, d *alpha, z *x, int *incx, z *ap)
-void zhpr2(char *uplo, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *ap)
-void zrotg(z *ca, z *cb, d *c, z *s)
-void zscal(int *n, z *za, z *zx, int *incx)
-void zswap(int *n, z *zx, int *incx, z *zy, int *incy)
-void zsymm(char *side, char *uplo, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)
-void zsyr2k(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)
-void zsyrk(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *beta, z *c, int *ldc)
-void ztbmv(char *uplo, char *trans, char *diag, int *n, int *k, z *a, int *lda, z *x, int *incx)
-void ztbsv(char *uplo, char *trans, char *diag, int *n, int *k, z *a, int *lda, z *x, int *incx)
-void ztpmv(char *uplo, char *trans, char *diag, int *n, z *ap, z *x, int *incx)
-void ztpsv(char *uplo, char *trans, char *diag, int *n, z *ap, z *x, int *incx)
-void ztrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb)
-void ztrmv(char *uplo, char *trans, char *diag, int *n, z *a, int *lda, z *x, int *incx)
-void ztrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb)
-void ztrsv(char *uplo, char *trans, char *diag, int *n, z *a, int *lda, z *x, int *incx)
+int zdotu(z *res, int *n, z *zx, int *incx, z *zy, int *incy)
+int zdrot(int *n, z *cx, int *incx, z *cy, int *incy, d *c, d *s)
+int zdscal(int *n, d *da, z *zx, int *incx)
+int zgbmv(char *trans, int *m, int *n, int *kl, int *ku, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)
+int zgemm(char *transa, char *transb, int *m, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)
+int zgemv(char *trans, int *m, int *n, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)
+int zgerc(int *m, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)
+int zgeru(int *m, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)
+int zhbmv(char *uplo, int *n, int *k, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)
+int zhemm(char *side, char *uplo, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)
+int zhemv(char *uplo, int *n, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)
+int zher(char *uplo, int *n, d *alpha, z *x, int *incx, z *a, int *lda)
+int zher2(char *uplo, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)
+int zher2k(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, d *beta, z *c, int *ldc)
+int zherk(char *uplo, char *trans, int *n, int *k, d *alpha, z *a, int *lda, d *beta, z *c, int *ldc)
+int zhpmv(char *uplo, int *n, z *alpha, z *ap, z *x, int *incx, z *beta, z *y, int *incy)
+int zhpr(char *uplo, int *n, d *alpha, z *x, int *incx, z *ap)
+int zhpr2(char *uplo, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *ap)
+int zrotg(z *ca, z *cb, d *c, z *s)
+int zscal(int *n, z *za, z *zx, int *incx)
+int zswap(int *n, z *zx, int *incx, z *zy, int *incy)
+int zsymm(char *side, char *uplo, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)
+int zsyr2k(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)
+int zsyrk(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *beta, z *c, int *ldc)
+int ztbmv(char *uplo, char *trans, char *diag, int *n, int *k, z *a, int *lda, z *x, int *incx)
+int ztbsv(char *uplo, char *trans, char *diag, int *n, int *k, z *a, int *lda, z *x, int *incx)
+int ztpmv(char *uplo, char *trans, char *diag, int *n, z *ap, z *x, int *incx)
+int ztpsv(char *uplo, char *trans, char *diag, int *n, z *ap, z *x, int *incx)
+int ztrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb)
+int ztrmv(char *uplo, char *trans, char *diag, int *n, z *a, int *lda, z *x, int *incx)
+int ztrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb)
+int ztrsv(char *uplo, char *trans, char *diag, int *n, z *a, int *lda, z *x, int *incx)
diff --git a/scipy/linalg/cython_lapack_signatures.txt b/scipy/linalg/cython_lapack_signatures.txt
index 1f3dc226a..05a4d30e9 100644
--- a/scipy/linalg/cython_lapack_signatures.txt
+++ b/scipy/linalg/cython_lapack_signatures.txt
@@ -1494,6 +1494,7 @@ void zunmr2(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *
 void zunmr3(char *side, char *trans, int *m, int *n, int *k, int *l, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *info)
 void zunmrq(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info)
 void zunmrz(char *side, char *trans, int *m, int *n, int *k, int *l, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info)
-void zunmtr(char *side, char *uplo, char *trans, int *m, int *n, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info)
-void zupgtr(char *uplo, int *n, z *ap, z *tau, z *q, int *ldq, z *work, int *info)
-void zupmtr(char *side, char *uplo, char *trans, int *m, int *n, z *ap, z *tau, z *c, int *ldc, z *work, int *info)
+void zunmtr(char *side, char *uplo, char *trans, int *m, int *n, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info)
+void zupgtr(char *uplo, int *n, z *ap, z *tau, z *q, int *ldq, z *work, int *info)
+void zupmtr(char *side, char *uplo, char *trans, int *m, int *n, z *ap, z *tau, z *c, int *ldc, z *work, int *info)
+void ilaenv(int *ispec, char *name, char *opts, int *n1, int *n2, int *n3, int *n4)
diff --git a/scipy/linalg/fblas_l1.pyf.src b/scipy/linalg/fblas_l1.pyf.src
index 4803a4a97..5adc703a4 100644
--- a/scipy/linalg/fblas_l1.pyf.src
+++ b/scipy/linalg/fblas_l1.pyf.src
@@ -279,14 +279,16 @@ end subroutine <prefix>axpy
 function sdot(n,x,offx,incx,y,offy,incy) result (xy)
   ! Computes a vector-vector dot product.
 
-  fortranname sdot
+  callstatement sdot_return_value=(*f2py_func)(&n,x+offx,&incx,y+offy,&incy)
+  callprotoargument int*,float*,int*,float*,int*
 
-  callstatement (*f2py_func)(&sdot,&n,x+offx,&incx,y+offy,&incy)
-  callprotoargument float*,F_INT*,float*,F_INT*,float*,F_INT*
+  fortranname F_FUNC(sdot,SDOT)
+  ! This following line is to avoid Fortran wrappers - fix for CLAPACK
+  intent(c) sdot
 
   real dimension(*), intent(in) :: x
   real dimension(*), intent(in) :: y
-  real sdot,xy
+  double precision sdot,xy
   integer optional, intent(in),check(incx>0||incx<0) :: incx = 1
   integer optional, intent(in),check(incy>0||incy<0) :: incy = 1
   integer optional, intent(in),depend(x) :: offx=0
@@ -304,8 +306,12 @@ end function sdot
 function ddot(n,x,offx,incx,y,offy,incy) result (xy)
   ! Computes a vector-vector dot product.
 
-  callstatement (*f2py_func)(&ddot,&n,x+offx,&incx,y+offy,&incy)
-  callprotoargument double*,F_INT*,double*,F_INT*,double*,F_INT*
+  callstatement ddot_return_value=(*f2py_func)(&n,x+offx,&incx,y+offy,&incy)
+  callprotoargument int*,double*,int*,double*,int*
+
+  fortranname F_FUNC(ddot,ddot)
+  ! This following line is to avoid Fortran wrappers - fix for CLAPACK
+  intent(c) ddot
 
   double precision dimension(*), intent(in) :: x
   double precision dimension(*), intent(in) :: y
@@ -324,6 +330,7 @@ function ddot(n,x,offx,incx,y,offy,incy) result (xy)
 end function ddot
 
 
++// in CLAPACK, cdotu and zdotu are void and return by pointer (as can't return complex* without allocation)
 function <prefix2c>dotu(n,x,offx,incx,y,offy,incy) result(xy)
 
   <ftype2c> :: <prefix2c>dotu, xy
@@ -335,6 +342,11 @@ function <prefix2c>dotu(n,x,offx,incx,y,offy,incy) result(xy)
   <ftype2c> dimension(*),intent(in) :: x
   <ftype2c> dimension(*),intent(in) :: y
 
++  fortranname F_FUNC(<prefix2c>dotu,<C,Z>DOTU)
++  ! This following line is to avoid Fortran wrappers - fix for CLAPACK
++  intent(c) <prefix2c>dotu
++
+
   integer optional, intent(in),check(incx>0||incx<0) :: incx = 1
   integer optional, intent(in),check(incy>0||incy<0) :: incy = 1
 
@@ -354,10 +366,12 @@ end function <prefix2c>dotu
 function <prefix2c>dotc(n,x,offx,incx,y,offy,incy) result(xy)
 
   <ftype2c> :: <prefix2c>dotc, xy
-  fortranname w<prefix2c>dotc
+  callstatement <prefix2c>dotc_return_value=(*f2py_func)(&n,x+offx,&incx,y+offy,&incy)
+  callprotoargument int*,<ctype2c>*,int*,<ctype2c>*,int*
 
-  callstatement (*f2py_func)(&<prefix2c>dotc,&n,x+offx,&incx,y+offy,&incy)
-  callprotoargument <ctype2c>*,F_INT*,<ctype2c>*,F_INT*,<ctype2c>*,F_INT*
+  fortranname F_FUNC(<prefix2c>dotc,<C,Z>DOTC)
+  ! This following line is to avoid Fortran wrappers - fix for CLAPACK
+  intent(c) <prefix2c>dotc
 
   <ftype2c> dimension(*),intent(in) :: x
   <ftype2c> dimension(*),intent(in) :: y
@@ -379,10 +393,15 @@ end function <prefix2c>dotc
 
 function <prefix3>nrm2(n,x,offx,incx) result(n2)
 
-  <ftypereal3> <prefix3>nrm2, n2
+  <ftypereal3> nm2
+  double precision <prefix3>nrm2
 
-  callstatement (*f2py_func)(&<prefix3>nrm2, &n,x+offx,&incx)
-  callprotoargument <ctypereal3>*,F_INT*,<ctype3>*,F_INT*
+  callstatement <prefix3>nrm2_return_value=(*f2py_func)( &n,x+offx,&incx)
+  callprotoargument int*,<ctype3>*,int*
+
+  fortranname F_FUNC(<prefix3>nrm2,<S,SC>NRM2)
+  ! This following line is to avoid Fortran wrappers - fix for CLAPACK
+  intent(c) <prefix3>nrm2
 
   <ftype3> dimension(*),intent(in) :: x
 
@@ -399,10 +418,14 @@ end function <prefix3>nrm2
 
 function <prefix4>nrm2(n,x,offx,incx) result(n2)
 
-  <ftypereal4> <prefix4>nrm2, n2
+  callstatement <prefix4>nrm2_return_value=(*f2py_func)(&n,x+offx,&incx)
+  callprotoargument int*,<ctype4>*,int*
 
-  callstatement (*f2py_func)(&<prefix4>nrm2, &n,x+offx,&incx)
-  callprotoargument <ctypereal4>*,F_INT*,<ctype4>*,F_INT*
+  double precision <prefix4>nrm2
+  <ftype4> n2
+  fortranname F_FUNC(<prefix4>nrm2,<S,D>NRM2)
+  ! This following line is to avoid Fortran wrappers - fix for CLAPACK
+  intent(c) <prefix4>nrm2
 
   <ftype4> dimension(*),intent(in) :: x
 
@@ -417,14 +440,20 @@ function <prefix4>nrm2(n,x,offx,incx) result(n2)
 end function <prefix4>nrm2
 
 
-function <prefix3>asum(n,x,offx,incx) result (s)
+function <prefix3>asum(n,x,offx,incx) result (d)
   ! Computes the sum of magnitudes of the vector elements
 
-  callstatement (*f2py_func)(&<prefix3>asum,&n,x+offx,&incx)
-  callprotoargument <ctypereal3>*,F_INT*,<ctype3>*,F_INT*
+  callstatement <prefix3>asum_return_value=(*f2py_func)(&n,x+offx,&incx)
+  callprotoargument int*,<ctype3>*,int*
+ 
+  double precision <prefix3>asum
+  fortranname F_FUNC(<prefix3>asum,<S,SC>ASUM)
+  ! This following line is to avoid Fortran wrappers - fix for CLAPACK
+  intent(c) <prefix3>asum
 
   <ftype3> dimension(*), intent(in) :: x
-  <ftypereal3> <prefix3>asum,s
+  <ftypereal3> s
+  double precision <prefix3>asum
   integer optional, intent(in), check(incx>0||incx<0) :: incx = 1
   integer optional, intent(in), depend(x) :: offx=0
   check(offx>=0 && offx<len(x)) :: offx
@@ -434,11 +463,16 @@ function <prefix3>asum(n,x,offx,incx) result (s)
 end function <prefix3>asum
 
 
-function <prefix4>asum(n,x,offx,incx) result (s)
+function <prefix4>asum(n,x,offx,incx) result (d)
   ! Computes the sum of magnitudes of the vector elements
 
-  callstatement (*f2py_func)(&<prefix4>asum,&n,x+offx,&incx)
-  callprotoargument <ctypereal4>*,F_INT*,<ctype4>*,F_INT*
+  callstatement <prefix4>asum_return_value=(*f2py_func)(&n,x+offx,&incx) 
+  callprotoargument int*,<ctype4>*,int*
+
+  <ftype4> <prefix4>asum
+  fortranname F_FUNC(<prefix4>asum,<D,Z>ASUM)
+  ! This following line is to avoid Fortran wrappers - fix for CLAPACK
+  intent(c) <prefix4>asum
 
   <ftype4> dimension(*), intent(in) :: x
   <ftypereal4> <prefix4>asum,s
diff --git a/scipy/linalg/setup.py b/scipy/linalg/setup.py
index 0cbd5ffdf..d4ee4f867 100644
--- a/scipy/linalg/setup.py
+++ b/scipy/linalg/setup.py
@@ -44,9 +44,10 @@ def configuration(parent_package='', top_path=None):
     # flapack:
     sources = ['flapack.pyf.src']
     sources += get_g77_abi_wrappers(lapack_opt)
-    dep_pfx = join('src', 'lapack_deprecations')
-    deprecated_lapack_routines = [join(dep_pfx, c + 'gegv.f') for c in 'cdsz']
-    sources += deprecated_lapack_routines
+#   CLAPACK still has these routines (with conflicting signatures)
+#    dep_pfx = join('src', 'lapack_deprecations')
+#    deprecated_lapack_routines = [join(dep_pfx, c + 'gegv.f') for c in 'cdsz']
+#    sources += deprecated_lapack_routines
     depends = ['flapack_gen.pyf.src',
                'flapack_gen_banded.pyf.src',
                'flapack_gen_tri.pyf.src',
diff --git a/scipy/optimize/_lsq/setup.py b/scipy/optimize/_lsq/setup.py
index 7ce589c0c..6412886e0 100644
--- a/scipy/optimize/_lsq/setup.py
+++ b/scipy/optimize/_lsq/setup.py
@@ -3,7 +3,7 @@ def configuration(parent_package='', top_path=None):
     from numpy.distutils.misc_util import Configuration
     config = Configuration('_lsq', parent_package, top_path)
     config.add_extension('givens_elimination',
-                         sources=['givens_elimination.c'])
+                         sources=['givens_elimination.c'],include_dirs=['../../linalg'])
     return config
 
 
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/cgsrfs.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/cgsrfs.c
index a7dd2f8fd..3b2544d4f 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/cgsrfs.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/cgsrfs.c
@@ -171,13 +171,6 @@ cgsrfs(trans_t trans, SuperMatrix *A, SuperMatrix *L, SuperMatrix *U,
     int      isave[3];
 
     extern int clacon2_(int *, complex *, complex *, float *, int *, int []);
-#ifdef _CRAY
-    extern int CCOPY(int *, complex *, int *, complex *, int *);
-    extern int CSAXPY(int *, complex *, complex *, int *, complex *, int *);
-#else
-    extern int ccopy_(int *, complex *, int *, complex *, int *);
-    extern int caxpy_(int *, complex *, complex *, int *, complex *, int *);
-#endif
 
     Astore = A->Store;
     Aval   = Astore->nzval;
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/dgscon.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/dgscon.c
index d51f24c3b..b76dc7a78 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/dgscon.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/dgscon.c
@@ -92,10 +92,7 @@ dgscon(char *norm, SuperMatrix *L, SuperMatrix *U,
     double *work;
     int    *iwork;
     int    isave[3];
-    extern int drscl_(int *, double *, double *, int *);
-
     extern int dlacon2_(int *, double *, double *, int *, double *, int *, int []);
-
     
     /* Test the input parameters. */
     *info = 0;
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/dgsrfs.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/dgsrfs.c
index d37226035..69f6bd8cf 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/dgsrfs.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/dgsrfs.c
@@ -171,13 +171,6 @@ dgsrfs(trans_t trans, SuperMatrix *A, SuperMatrix *L, SuperMatrix *U,
     int      isave[3];
 
     extern int dlacon2_(int *, double *, double *, int *, double *, int *, int []);
-#ifdef _CRAY
-    extern int SCOPY(int *, double *, int *, double *, int *);
-    extern int SSAXPY(int *, double *, double *, int *, double *, int *);
-#else
-    extern int dcopy_(int *, double *, int *, double *, int *);
-    extern int daxpy_(int *, double *, double *, int *, double *, int *);
-#endif
 
     Astore = A->Store;
     Aval   = Astore->nzval;
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_ccopy_to_ucol.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_ccopy_to_ucol.c
index a5eb0b613..bc8ce3537 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_ccopy_to_ucol.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_ccopy_to_ucol.c
@@ -26,8 +26,6 @@ at the top-level directory.
 int num_drop_U;
 #endif
 
-extern void ccopy_(int *, complex [], int *, complex [], int *);
-
 #if 0
 static complex *A;  /* used in _compare_ only */
 static int _compare_(const void *a, const void *b)
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_cdrop_row.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_cdrop_row.c
index 09b8a937d..fdd6064de 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_cdrop_row.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_cdrop_row.c
@@ -23,15 +23,6 @@ at the top-level directory.
 #include <stdlib.h>
 #include "slu_cdefs.h"
 
-extern void cswap_(int *, complex [], int *, complex [], int *);
-extern void caxpy_(int *, complex *, complex [], int *, complex [], int *);
-extern void ccopy_(int *, complex [], int *, complex [], int *);
-extern float scasum_(int *, complex *, int *);
-extern float scnrm2_(int *, complex *, int *);
-extern void scopy_(int *, float [], int *, float [], int *);
-extern double dnrm2_(int *, double [], int *);
-extern int icamax_(int *, complex [], int *);
-
 static float *A;  /* used in _compare_ only */
 static int _compare_(const void *a, const void *b)
 {
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_dcopy_to_ucol.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_dcopy_to_ucol.c
index 2bb889c39..658e7e71e 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_dcopy_to_ucol.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_dcopy_to_ucol.c
@@ -26,7 +26,6 @@ at the top-level directory.
 int num_drop_U;
 #endif
 
-extern void dcopy_(int *, double [], int *, double [], int *);
 
 #if 0
 static double *A;  /* used in _compare_ only */
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_ddrop_row.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_ddrop_row.c
index f25b5085a..19afee76c 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_ddrop_row.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_ddrop_row.c
@@ -23,13 +23,6 @@ at the top-level directory.
 #include <stdlib.h>
 #include "slu_ddefs.h"
 
-extern void dswap_(int *, double [], int *, double [], int *);
-extern void daxpy_(int *, double *, double [], int *, double [], int *);
-extern void dcopy_(int *, double [], int *, double [], int *);
-extern double dasum_(int *, double *, int *);
-extern double dnrm2_(int *, double *, int *);
-extern double dnrm2_(int *, double [], int *);
-extern int idamax_(int *, double [], int *);
 
 static double *A;  /* used in _compare_ only */
 static int _compare_(const void *a, const void *b)
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c
index 6dc0460c1..994224c35 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c
@@ -26,7 +26,7 @@ at the top-level directory.
 int num_drop_U;
 #endif
 
-extern void scopy_(int *, float [], int *, float [], int *);
+extern int scopy_(int *, float [], int *, float [], int *);
 
 #if 0
 static float *A;  /* used in _compare_ only */
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_sdrop_row.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_sdrop_row.c
index 836ee5450..8d1368838 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_sdrop_row.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_sdrop_row.c
@@ -23,13 +23,6 @@ at the top-level directory.
 #include <stdlib.h>
 #include "slu_sdefs.h"
 
-extern void sswap_(int *, float [], int *, float [], int *);
-extern void saxpy_(int *, float *, float [], int *, float [], int *);
-extern void scopy_(int *, float [], int *, float [], int *);
-extern float sasum_(int *, float *, int *);
-extern float snrm2_(int *, float *, int *);
-extern double dnrm2_(int *, double [], int *);
-extern int isamax_(int *, float [], int *);
 
 static float *A;  /* used in _compare_ only */
 static int _compare_(const void *a, const void *b)
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_zcopy_to_ucol.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_zcopy_to_ucol.c
index afe4a7e04..4f45bd11d 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_zcopy_to_ucol.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_zcopy_to_ucol.c
@@ -26,7 +26,6 @@ at the top-level directory.
 int num_drop_U;
 #endif
 
-extern void zcopy_(int *, doublecomplex [], int *, doublecomplex [], int *);
 
 #if 0
 static doublecomplex *A;  /* used in _compare_ only */
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_zdrop_row.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_zdrop_row.c
index 2de1226ef..362e18210 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_zdrop_row.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/ilu_zdrop_row.c
@@ -23,15 +23,6 @@ at the top-level directory.
 #include <stdlib.h>
 #include "slu_zdefs.h"
 
-extern void zswap_(int *, doublecomplex [], int *, doublecomplex [], int *);
-extern void zaxpy_(int *, doublecomplex *, doublecomplex [], int *, doublecomplex [], int *);
-extern void zcopy_(int *, doublecomplex [], int *, doublecomplex [], int *);
-extern double dzasum_(int *, doublecomplex *, int *);
-extern double dznrm2_(int *, doublecomplex *, int *);
-extern double dnrm2_(int *, double [], int *);
-extern void dcopy_(int *, double [], int *, double [], int *);
-extern int izamax_(int *, doublecomplex [], int *);
-
 static double *A;  /* used in _compare_ only */
 static int _compare_(const void *a, const void *b)
 {
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/scipy_slu_config.h b/scipy/sparse/linalg/dsolve/SuperLU/SRC/scipy_slu_config.h
index 5afc93b5d..1a2c4ca36 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/scipy_slu_config.h
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/scipy_slu_config.h
@@ -3,6 +3,14 @@
 
 #include <stdlib.h>
 
+#include"f2c.h"
+#define integer int
+#define logical int
+#include"clapack.h"
+#undef integer
+#undef logical
+
+
 /*
  * Support routines
  */
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/sgsrfs.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/sgsrfs.c
index 5faab1dfb..7380eb6cc 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/sgsrfs.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/sgsrfs.c
@@ -171,13 +171,6 @@ sgsrfs(trans_t trans, SuperMatrix *A, SuperMatrix *L, SuperMatrix *U,
     int      isave[3];
 
     extern int slacon2_(int *, float *, float *, int *, float *, int *, int []);
-#ifdef _CRAY
-    extern int SCOPY(int *, float *, int *, float *, int *);
-    extern int SSAXPY(int *, float *, float *, int *, float *, int *);
-#else
-    extern int scopy_(int *, float *, int *, float *, int *);
-    extern int saxpy_(int *, float *, float *, int *, float *, int *);
-#endif
 
     Astore = A->Store;
     Aval   = Astore->nzval;
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/sgssvx.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/sgssvx.c
index c7aa79b3c..4f3a6310b 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/sgssvx.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/sgssvx.c
@@ -21,6 +21,8 @@ at the top-level directory.
  */
 #include "slu_sdefs.h"
 
+extern float slangs(char *, SuperMatrix *);
+
 /*! \brief
  *
  * <pre>
@@ -378,8 +380,6 @@ sgssvx(superlu_options_t *options, SuperMatrix *A, int *perm_c, int *perm_r,
     double    t0;      /* temporary time */
     double    *utime;
 
-    /* External functions */
-    extern float slangs(char *, SuperMatrix *);
 
     Bstore = B->Store;
     Xstore = X->Store;
@@ -575,7 +575,8 @@ printf("dgssvx: Fact=%4d, Trans=%4d, equed=%c\n",
         } else {
 	    *(unsigned char *)norm = 'I';
         }
-        anorm = slangs(norm, AA);
+        anorm = slangs(norm, AA);    /* External functions */
+        extern float slangs(char *, SuperMatrix *);
         sgscon(norm, L, U, anorm, rcond, stat, &info1);
         utime[RCOND] = SuperLU_timer_() - t0;
     }
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_dcomplex.h b/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_dcomplex.h
index 67e83bcc7..e5757d5c4 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_dcomplex.h
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_dcomplex.h
@@ -28,7 +28,10 @@ at the top-level directory.
 #ifndef DCOMPLEX_INCLUDE
 #define DCOMPLEX_INCLUDE
 
-typedef struct { double r, i; } doublecomplex;
+#include"scipy_slu_config.h"
+
+// defined in clapack
+//typedef struct { double r, i; } doublecomplex;
 
 
 /* Macro definitions */
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_scomplex.h b/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_scomplex.h
index 5c9aa7058..a10f9a52f 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_scomplex.h
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_scomplex.h
@@ -27,8 +27,9 @@ at the top-level directory.
 
 #ifndef SCOMPLEX_INCLUDE
 #define SCOMPLEX_INCLUDE
-
-typedef struct { float r, i; } complex;
+#include"scipy_slu_config.h"
+// defined in  CLAPACK
+//typedef struct { float r, i; } complex;
 
 
 /* Macro definitions */
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_util.h b/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_util.h
index d34e4fe5b..7df125f68 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_util.h
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/slu_util.h
@@ -398,7 +398,6 @@ extern int     spcoletree (int *, int *, int *, int, int, int *);
 extern int     *TreePostorder (int, int *);
 extern double  SuperLU_timer_ ();
 extern int     sp_ienv (int);
-extern int     xerbla_ (char *, int *);
 extern void    ifill (int *, int, int);
 extern void    snode_profile (int, int *);
 extern void    super_stats (int, int *);
diff --git a/scipy/sparse/linalg/dsolve/SuperLU/SRC/zgsrfs.c b/scipy/sparse/linalg/dsolve/SuperLU/SRC/zgsrfs.c
index 02b63df30..71209b3b7 100644
--- a/scipy/sparse/linalg/dsolve/SuperLU/SRC/zgsrfs.c
+++ b/scipy/sparse/linalg/dsolve/SuperLU/SRC/zgsrfs.c
@@ -171,13 +171,6 @@ zgsrfs(trans_t trans, SuperMatrix *A, SuperMatrix *L, SuperMatrix *U,
     int      isave[3];
 
     extern int zlacon2_(int *, doublecomplex *, doublecomplex *, double *, int *, int []);
-#ifdef _CRAY
-    extern int CCOPY(int *, doublecomplex *, int *, doublecomplex *, int *);
-    extern int CSAXPY(int *, doublecomplex *, doublecomplex *, int *, doublecomplex *, int *);
-#else
-    extern int zcopy_(int *, doublecomplex *, int *, doublecomplex *, int *);
-    extern int zaxpy_(int *, doublecomplex *, doublecomplex *, int *, doublecomplex *, int *);
-#endif
 
     Astore = A->Store;
     Aval   = Astore->nzval;
diff --git a/scipy/sparse/linalg/dsolve/_superlu_utils.c b/scipy/sparse/linalg/dsolve/_superlu_utils.c
index 16bb03392..13e63c0ba 100644
--- a/scipy/sparse/linalg/dsolve/_superlu_utils.c
+++ b/scipy/sparse/linalg/dsolve/_superlu_utils.c
@@ -243,12 +243,12 @@ int input_error(char *srname, int *info)
  * Stubs for Harwell Subroutine Library functions that SuperLU tries to call.
  */
 
-void mc64id_(int *a)
+int mc64id_(int *a)
 {
     superlu_python_module_abort("chosen functionality not available");
 }
 
-void mc64ad_(int *a, int *b, int *c, int d[], int e[], double f[],
+int mc64ad_(int *a, int *b, int *c, int d[], int e[], double f[],
 	     int *g, int h[], int *i, int j[], int *k, double l[],
 	     int m[], int n[])
 {
diff --git a/scipy/sparse/linalg/eigen/arpack/ARPACK/SRC/debug.h b/scipy/sparse/linalg/eigen/arpack/ARPACK/SRC/debug.h
index 5eb0bb1b3..81a6efafb 100644
--- a/scipy/sparse/linalg/eigen/arpack/ARPACK/SRC/debug.h
+++ b/scipy/sparse/linalg/eigen/arpack/ARPACK/SRC/debug.h
@@ -1,16 +1,16 @@
-c
+
 c\SCCS Information: @(#) 
 c FILE: debug.h   SID: 2.3   DATE OF SID: 11/16/95   RELEASE: 2 
 c
 c     %---------------------------------%
 c     | See debug.doc for documentation |
 c     %---------------------------------%
-      integer  logfil, ndigit, mgetv0,
-     &         msaupd, msaup2, msaitr, mseigt, msapps, msgets, mseupd,
-     &         mnaupd, mnaup2, mnaitr, mneigh, mnapps, mngets, mneupd,
-     &         mcaupd, mcaup2, mcaitr, mceigh, mcapps, mcgets, mceupd
-      common /debug/ 
-     &         logfil, ndigit, mgetv0,
-     &         msaupd, msaup2, msaitr, mseigt, msapps, msgets, mseupd,
-     &         mnaupd, mnaup2, mnaitr, mneigh, mnapps, mngets, mneupd,
-     &         mcaupd, mcaup2, mcaitr, mceigh, mcapps, mcgets, mceupd
+c      integer  logfil, ndigit, mgetv0,
+c     &         msaupd, msaup2, msaitr, mseigt, msapps, msgets, mseupd,
+c     &         mnaupd, mnaup2, mnaitr, mneigh, mnapps, mngets, mneupd,
+c     &         mcaupd, mcaup2, mcaitr, mceigh, mcapps, mcgets, mceupd
+c      common /debug/
+c     &         logfil, ndigit, mgetv0,
+c     &         msaupd, msaup2, msaitr, mseigt, msapps, msgets, mseupd,
+c     &         mnaupd, mnaup2, mnaitr, mneigh, mnapps, mngets, mneupd,
+c     &         mcaupd, mcaup2, mcaitr, mceigh, mcapps, mcgets, mceupd
diff --git a/scipy/sparse/linalg/eigen/arpack/ARPACK/SRC/stat.h b/scipy/sparse/linalg/eigen/arpack/ARPACK/SRC/stat.h
index 66a8e9f87..81d49c3bd 100644
--- a/scipy/sparse/linalg/eigen/arpack/ARPACK/SRC/stat.h
+++ b/scipy/sparse/linalg/eigen/arpack/ARPACK/SRC/stat.h
@@ -5,17 +5,17 @@ c
 c\SCCS Information: @(#) 
 c FILE: stat.h   SID: 2.2   DATE OF SID: 11/16/95   RELEASE: 2 
 c
-      real       t0, t1, t2, t3, t4, t5
-      save       t0, t1, t2, t3, t4, t5
+c      real       t0, t1, t2, t3, t4, t5
+c      save       t0, t1, t2, t3, t4, t5
 c
-      integer    nopx, nbx, nrorth, nitref, nrstrt
-      real       tsaupd, tsaup2, tsaitr, tseigt, tsgets, tsapps, tsconv,
-     &           tnaupd, tnaup2, tnaitr, tneigh, tngets, tnapps, tnconv,
-     &           tcaupd, tcaup2, tcaitr, tceigh, tcgets, tcapps, tcconv,
-     &           tmvopx, tmvbx, tgetv0, titref, trvec
-      common /timing/ 
-     &           nopx, nbx, nrorth, nitref, nrstrt,
-     &           tsaupd, tsaup2, tsaitr, tseigt, tsgets, tsapps, tsconv,
-     &           tnaupd, tnaup2, tnaitr, tneigh, tngets, tnapps, tnconv,
-     &           tcaupd, tcaup2, tcaitr, tceigh, tcgets, tcapps, tcconv,
-     &           tmvopx, tmvbx, tgetv0, titref, trvec
+c      integer    nopx, nbx, nrorth, nitref, nrstrt
+c      real       tsaupd, tsaup2, tsaitr, tseigt, tsgets, tsapps, tsconv,
+c     &           tnaupd, tnaup2, tnaitr, tneigh, tngets, tnapps, tnconv,
+c     &           tcaupd, tcaup2, tcaitr, tceigh, tcgets, tcapps, tcconv,
+c     &           tmvopx, tmvbx, tgetv0, titref, trvec
+c      common /timing/
+c     &           nopx, nbx, nrorth, nitref, nrstrt,
+c     &           tsaupd, tsaup2, tsaitr, tseigt, tsgets, tsapps, tsconv,
+c     &           tnaupd, tnaup2, tnaitr, tneigh, tngets, tnapps, tnconv,
+c     &           tcaupd, tcaup2, tcaitr, tceigh, tcgets, tcapps, tcconv,
+c     &           tmvopx, tmvbx, tgetv0, titref, trvec
-- 
2.25.1

