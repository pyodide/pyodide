from gzip import decompress

import pytest
from pytest_pyodide import run_in_pyodide

sr = 44100
encoded_data = [
    # WAV encoded
    b"RIFF4\x00\x00\x00WAVEfmt \x10\x00\x00\x00\x01\x00\x02\x00D\xac\x00\x00\x10\xb1\x02\x00\x04\x00\x10\x00data\x10\x00\x00\x00|e\xf2,d\xa0#\x07\xd2\xc6r\x15\xfc\x11\xc4\x00",
    # FLAC encoded
    b'fLaC\x00\x00\x00"\x10\x00\x10\x00\x00\x00\x1b\x00\x00\x1b\n\xc4B\xf0\x00\x00\x00\x04\xf7\x0c\x835\x1c\x83\xfb\xc8`~\xf9`\x80F\xfa(\x84\x00\x00( \x00\x00\x00reference libFLAC 1.3.3 20190804\x00\x00\x00\x00\xff\xf8i\x18\x00\x03\xb6\x02e|\xa0e\xc6\xd3\x11\xfc\x02,\xf3\x07$\x15r\x00\xc5\xd2\x98',
    # MP3 encoded
    decompress(
        b"\x1f\x8b\x08\x00\x91\x9a'g\x02\xff\xfb\xff{B\n\x03\x01\x10\x91\x99\x97\x0e\xa4\xf8\x81\x98\x89\x81\x81\xd5\x87\xe11\xa9\xe0?\xc9\x00h\x97\x8d\x8f\xa3\xaf\xab\xb1\x9e\xa1\x81\x01\xcbz\x98SL\x15T\xd8\xf6\xf820\x9e\x01\xb9\xc3\xbbz\xc5K\x86\xe1\x0e\xfe\xff\xbe\xe0\xc2\xc0\xc0l\xc9\x10\xf5\x03\x18\xfci\x0eRoY\x18\x18\xfc\x9e\xe8'?\xdf\xf8\x8c\x8b\xab\xedu\xcd\xf7\x193\xd3;\xf7\xdcl\xcb\x94\xf2t\x01\xeb8|?\x81\xe1\xc3\x7f~\x1e\x06\xe3\x06\xc6\x87@\xd0\x00\x14\x031\xc0a\xc5|\x18\x08`\x8cK@\xda\xf2\xff\xff\x1f\x0c\x1c\xa0 \xff\xfb\xff\xff\xb3z\xe7\xc3\x07\x80\x82<\xff\xff\x97\xff`2\xf8\xf0\xe1\xe3\x03 \x8f\x03\xa8\xf48\xd0\x14\xa6 O\xf3\xbc^\x95[\x12\x15@\x00J\x0c@\x05_\x80\n\xf8\xfe\xff?\xfc\xff3O\xf9\x01\x06~\xfe\x0f\x1f@\xfa\x19>| \xc4`\x84;\xc9\xfe\xff\xd7\xff\x07\x11.\xfd?{\xfb\xf6\xa0N\xd57\r\x8c\xa5l's\xd5\x95\xb2\xd4\x16eIMp\x11\xe2\rp\xef\xbch\xa5\xee6qI\xa6z\xc0\x15S\xde\x15\x1a\x1a\x01@\xe0\xa1\xa1\x01f\x8475\xcd>\xb9\xff\xdf\x02 X\xb9GDD\x02$,\"B4Cs\xf5\x8a\x19\xd3C\x1c\x18\x84\xe6\xf6\xecf\xceP>\xf0L\xdd\xe5\x85o\xcb\x8df\x81@S\xe1`\x97\x8b&\x0e\n\x02\x9cJ.\x9dB*\x1eS\x99\x9a\x9a\x9a\x9aY\x81\x80\x00c\x12\x17\x17W\xf6AGGG \xbb\xa9\x11H\xfb\xb6\x88\x88\x88\xc2,\xd6\x02bM\x05\xa0kW\x00\xf1\x12\x90\x92E\xab\xe0\t~\xd5(\xa0\"\xf8\xff[ eu\xff\x07\x06\x86LPbf`\xe0U\x00&3 Z\x02\xe4\x02\x99&\xc0d\xc7B\r{\x007\xb6\x8a\xdeL\x05\x00\x00"
    ),
]
expected_data = [
    [
        [0.79285452, 0.35115968],
        [-0.74692768, 0.05578563],
        [-0.44669537, 0.16755211],
        [0.14050816, 0.00600921],
    ],
    [
        [0.79285452, 0.35115968],
        [-0.74692768, 0.05578563],
        [-0.44669537, 0.16755211],
        [0.14050816, 0.00600921],
    ],
    # MP3 compression changes the values
    [
        [0.6424861, 0.30434918],
        [-0.64713442, 0.19903156],
        [-0.69718754, 0.09543724],
        [0.20520814, 0.05078391],
    ],
]


@pytest.mark.parametrize(
    "encoded_data,expected_data", zip(encoded_data, expected_data, strict=False)
)
@run_in_pyodide(packages=["soundfile", "numpy"])
def test_read(selenium, encoded_data, expected_data):
    from io import BytesIO

    import soundfile as sf
    from numpy.testing import assert_allclose

    decoded_data, sr = sf.read(BytesIO(encoded_data))

    assert_allclose(expected_data, decoded_data, atol=1e-4)
    assert sr == 44100
