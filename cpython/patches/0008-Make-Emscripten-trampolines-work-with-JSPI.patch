From 3a41dc4b23f05715c3107676718567eefa49cc39 Mon Sep 17 00:00:00 2001
From: Hood Chatham <roberthoodchatham@gmail.com>
Date: Wed, 28 Jun 2023 10:46:19 -0700
Subject: [PATCH 8/8] Make Emscripten trampolines work with JSPI

There is a WIP proposal to enable webassembly stack switching which have been
implemented in v8:

https://github.com/WebAssembly/js-promise-integration

It is not possible to switch stacks that contain JS frames so the Emscripten JS
trampolines that allow calling functions with the wrong number of arguments
don't work in this case. However, the js-promise-integration proposal requires
the [type reflection for Wasm/JS API](https://github.com/WebAssembly/js-types)
proposal, which allows us to actually count the number of arguments a function
expects.

For better compatibility with stack switching, this PR checks if type reflection
is available, and if so we use a switch block to decide the appropriate
signature. If type reflection is unavailable, we should use the current EMJS
trampoline.

We cache the function argument counts since when I didn't cache them performance
was negatively affected.
---
 Include/internal/pycore_object.h | 16 +++++++---
 Objects/descrobject.c            | 22 ++++++++------
 Objects/methodobject.c           |  7 -----
 Python/emscripten_trampoline.c   | 52 ++++++++++++++++++++++++++++++++
 configure                        |  2 +-
 configure.ac                     |  2 +-
 6 files changed, 79 insertions(+), 22 deletions(-)
 create mode 100644 Python/emscripten_trampoline.c

diff --git a/Include/internal/pycore_object.h b/Include/internal/pycore_object.h
index f022f82469..9b960ce9ce 100644
--- a/Include/internal/pycore_object.h
+++ b/Include/internal/pycore_object.h
@@ -292,11 +292,19 @@ PyAPI_FUNC(PyObject *) _PyObject_LookupSpecial(PyObject *, PyObject *);
  * trampoline mitigates common occurences of bad fpcasts on Emscripten.
  */
 #if defined(__EMSCRIPTEN__) && defined(PY_CALL_TRAMPOLINE)
+extern PyObject*
+_PyEM_TrampolineCall(PyCFunctionWithKeywords func,
+                     PyObject* self,
+                     PyObject* args,
+                     PyObject* kw);
+
 #define _PyCFunction_TrampolineCall(meth, self, args) \
-    _PyCFunctionWithKeywords_TrampolineCall( \
-        (*(PyCFunctionWithKeywords)(void(*)(void))meth), self, args, NULL)
-extern PyObject* _PyCFunctionWithKeywords_TrampolineCall(
-    PyCFunctionWithKeywords meth, PyObject *, PyObject *, PyObject *);
+    _PyEM_TrampolineCall( \
+        (*(PyCFunctionWithKeywords)(void(*)(void))(meth)), (self), (args), NULL)
+
+#define _PyCFunctionWithKeywords_TrampolineCall(meth, self, args, kw) \
+    _PyEM_TrampolineCall((meth), (self), (args), (kw))
+
 #else
 #define _PyCFunction_TrampolineCall(meth, self, args) \
     (meth)((self), (args))
diff --git a/Objects/descrobject.c b/Objects/descrobject.c
index 4d8b83758b..403802d4d4 100644
--- a/Objects/descrobject.c
+++ b/Objects/descrobject.c
@@ -15,15 +15,19 @@ class property "propertyobject *" "&PyProperty_Type"
 
 // see pycore_object.h
 #if defined(__EMSCRIPTEN__) && defined(PY_CALL_TRAMPOLINE)
-#include <emscripten.h>
-EM_JS(int, descr_set_trampoline_call, (setter set, PyObject *obj, PyObject *value, void *closure), {
-    return wasmTable.get(set)(obj, value, closure);
-});
-
-EM_JS(PyObject*, descr_get_trampoline_call, (getter get, PyObject *obj, void *closure), {
-    return wasmTable.get(get)(obj, closure);
-});
-#else
+extern PyObject*
+_PyEM_TrampolineCall(PyCFunctionWithKeywords func,
+                     PyObject* self,
+                     PyObject* args,
+                     PyObject* kw);
+
+#define descr_set_trampoline_call(set, obj, value, closure) \
+    ((int)_PyEM_TrampolineCall((PyCFunctionWithKeywords)(set), (obj), (value), (PyObject*)(closure)))
+
+
+#define descr_set_trampoline_call(get, obj, value, closure) \
+    _PyEM_TrampolineCall((PyCFunctionWithKeywords)(get), (obj), (PyObject*)(closure), NULL)
+
 #define descr_set_trampoline_call(set, obj, value, closure) \
     (set)((obj), (value), (closure))
 
diff --git a/Objects/methodobject.c b/Objects/methodobject.c
index 953cf4666d..d344bfa234 100644
--- a/Objects/methodobject.c
+++ b/Objects/methodobject.c
@@ -555,10 +555,3 @@ cfunction_call(PyObject *func, PyObject *args, PyObject *kwargs)
     return _Py_CheckFunctionResult(tstate, func, result, NULL);
 }
 
-#if defined(__EMSCRIPTEN__) && defined(PY_CALL_TRAMPOLINE)
-#include <emscripten.h>
-
-EM_JS(PyObject*, _PyCFunctionWithKeywords_TrampolineCall, (PyCFunctionWithKeywords func, PyObject *self, PyObject *args, PyObject *kw), {
-    return wasmTable.get(func)(self, args, kw);
-});
-#endif
diff --git a/Python/emscripten_trampoline.c b/Python/emscripten_trampoline.c
new file mode 100644
index 0000000000..44927459df
--- /dev/null
+++ b/Python/emscripten_trampoline.c
@@ -0,0 +1,52 @@
+#if defined(PY_CALL_TRAMPOLINE)
+
+#include <emscripten.h>
+
+EMSCRIPTEN_KEEPALIVE bool _PyEM_type_reflection_available;
+
+EM_JS_DEPS(_PyEMJS_TrampolineCall, "$getWasmTableEntry")
+EM_JS(int, _PyEMJS_TrampolineCall, (PyCFunctionWithKeywords func, PyObject *arg1, PyObject *arg2, PyObject *arg3), {
+    return wasmTable.get(func)(self, args, kw);
+}
+);
+
+EM_JS(int, count_params, (PyCFunctionWithKeywords func), {
+  let n = count_params.cache.get(func);
+  if (n !== undefined) {
+    return n;
+  }
+  n = WebAssembly.Function.type(getWasmTableEntry(func)).parameters.length;
+  count_params.cache.set(func, n);
+  return n;
+}
+count_params.cache = new Map();
+HEAP32[__PyEM_type_reflection_available/4] = "Function" in WebAssembly;
+)
+
+PyObject*
+_PyEM_TrampolineCall(PyCFunctionWithKeywords func,
+              PyObject* self,
+              PyObject* args,
+              PyObject* kw)
+{
+  if (!_PyEM_type_reflection_available) {
+    return _PyEMJS_TrampolineCall(func, self, args, kw);
+  } else {
+    switch (count_params(func)) {
+      case 0:
+        return ((zero_arg)func)();
+      case 1:
+        return ((one_arg)func)(self);
+      case 2:
+        return ((two_arg)func)(self, args);
+      case 3:
+        return ((three_arg)func)(self, args, kw);
+      default:
+        PyErr_SetString(SystemError, "Handler takes too many arguments");
+        return NULL;
+    }
+  }
+}
+
+
+#endif
diff --git a/configure b/configure
index 9e76287725..f7e714018f 100755
--- a/configure
+++ b/configure
@@ -15083,7 +15083,7 @@ PLATFORM_OBJS=
 case $ac_sys_system in #(
   Emscripten) :
 
-    as_fn_append PLATFORM_OBJS ' Python/emscripten_signal.o'
+    as_fn_append PLATFORM_OBJS ' Python/emscripten_signal.o Python/emscripten_trampoline.o'
     as_fn_append PLATFORM_HEADERS ' $(srcdir)/Include/internal/pycore_emscripten_signal.h'
    ;; #(
   *) :
diff --git a/configure.ac b/configure.ac
index c62a565eb6..6860bbdfc3 100644
--- a/configure.ac
+++ b/configure.ac
@@ -4523,7 +4523,7 @@ PLATFORM_OBJS=
 
 AS_CASE([$ac_sys_system],
   [Emscripten], [
-    AS_VAR_APPEND([PLATFORM_OBJS], [' Python/emscripten_signal.o'])
+    AS_VAR_APPEND([PLATFORM_OBJS], [' Python/emscripten_signal.o Python/emscripten_trampoline.o'])
     AS_VAR_APPEND([PLATFORM_HEADERS], [' $(srcdir)/Include/internal/pycore_emscripten_signal.h'])
   ],
 )
-- 
2.25.1

